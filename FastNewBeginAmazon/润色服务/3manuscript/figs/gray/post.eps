%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: post.pdf
%%Creator: Adobe Acrobat 19.21.0
%%For: liqi
%%CreationDate: 2019/11/1, 9:32:24
%%BoundingBox: -1 0 367 256
%%HiResBoundingBox: 0 0 366.2180 255.9272
%%CropBox: 0 0 366.2180 255.9272
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 548 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2019-11-01T09:31:33+08:00"
   xmp:ModifyDate="2019-11-01T09:31:33+08:00"
   pdf:Producer="GPL Ghostscript 9.05"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -255.927 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 255.927 li
366.218 255.927 li
366.218 0 li
cp
clp
-17.3455 260.127 mo
402.655 260.127 li
402.655 -6.87268 li
-17.3455 -6.87268 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
-17.3455 260.127 mo
402.655 260.127 li
402.655 -6.87268 li
-17.3455 -6.87268 li
cp
f
37.4045 98.8773 mo
134.905 98.8773 li
134.905 15.6273 li
37.4045 15.6273 li
cp
f
/1 
[/DeviceCMYK] /CSA add_res
.813809 .795224 .767361 .606043 cmyk
%ADOBeginSubsetFont: IAAAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /IAAAAA+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
7420adbfdf8e000001240000066e6670676d38a5162b0000079400000bb0
676c79660000000000007318000051ce68656164eb4b56cc000013440000
00366868656112331a5f0000137c00000024686d747800000000000013a0
000001746c6f63610000000000001514000023306d617870178d09af0000
3844000000206e616d652d31e6ec0000386400002e8270726570a1b2e8ea
000066e800000c2f67646972000000000000000000000000000100000190
000500080000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff000000000000000000000000000100000000000005ba001905ba001a
05a70019042600180000ffe70000ffe80000ffe7fe69ffe805ba0019fe69
ffe802ea000000b8000000b80000000000a800ad016900ad00bf00c201f0
001800af00b900b400c800170044009c007c009400870006005a00c80089
005200520005004400940119ffb4002f00a1000300a100cd00170057007e
00ba00160118ffe9007f008503d300870085000d002200410050006f008d
014cff75005c00df04830037004c006e00700180ff58ff8eff92ffa400a5
00b903c8fffd000b001a0063006300cdffee05d8ffdc002d005c00950099
00df019209b500400057008000b9039d0072009a035d0401ff67fffa0003
0021007700cd0004004d00cd01c0022b004c006500e70118017c034305d8
ffa3ffb0ffc40003001c005d0068009a00ba013501470221055cff4dffcd
0016002d00780080009900b200b600b600b800bd00da010c05f0ffa4fff0
0019002c0049007f00b400ce01c003fefd81fe3f00000005001800290039
0049006f00be00c700d0012301c1026f050c05320540057affd400140031
0055005700a700b400e601f7027e027e027f03c60446ff42000e00850091
00bf00c200c500e1011a012f014f01560229026f029e03720008002c0031
0031006400690089009800c700de012b01b6020c02cf03a304ab04fb061d
fee0ff0e00060026009b009d00c1010d011801200173018201d601e30243
025f029b02e2039404a904d20761001c005e006d008d00ab00f701120138
0151015b0168017c01870191019901cd01d001e802410254026b02ef0368
037103bd044204420453047304830586058b06e8fe58fec4fed1fef7ff32
ff860051007c008100910095009e00b400b900cf00d900d900df00e20105
010b010e010e012001210155017b017b017e018d01a201a801a901b401d0
01d001e201e901f201f501fb020002000206021b02210222022202230272
02770294029c02cf02cf02d002ec02f903170322032b0335033c0359036f
037103870390039003b503e1041a04cf04ff053205320596059f05a805ab
05c205f0060c0782080008ccfca3fd2afddefe00fe88fe96feb2feb4ffe1
00150019001a001c001f003c005100610061006a0078009600a500af00d3
010c0118011a012a013e014c0151015f016a0171017801820184019a01a5
01a801a901ae01bc01cd01d701ef0200020d021c02210222022e02350242
024f024f025e026502710290029202b402d602fa0307030b030f0315032a
0347035d036503740379039603b003cc03dd03e203f603fc03fc03ff040a
041f04220426042b0447045f0475049e04e704e7055c05cb05e5060a066d
068606b806f10736073e07500751075d078f07b607d4086000b600c300b5
00b700000000000000000000000001e00381034503b5008e0233041902ce
02ce002d005f0064034d023f000002a80188027d01b402240578063b023b
014e00f00426029402c6029f02f6023b034d014b0153006a023100000000
0000061404aa0000003c04c300ed04bc026502ce03b50078060c017e02ef
060c00b201000239000001c50330042b03cb00da03df010704a100db040a
011701ed02a70350010b01bd043e05580021039c00ae0371017d00b50245
00000afb088c012b014e01aa00870054013201f803ff0003024e00b40037
03e30083006b02d800ed00770088009701640467008e0033017c00e700a6
029e0329056e062a061501c90269048a021301b4000204a9000002390124
010305140084015d039a06ef02d9007500cf040a00de03ac04bc02cf02ae
034d04f005520168006d007d00860071ff810079055804d2016700030156
002504e00094007c033204210094007f0072005c002f00b6001800ba00b8
0041034d00720018001f004c016a01550099009a009a009800b200040078
006900140057006e00ce00b4065402b80067050e016500e7000004cbfe52
005affa60099ff67006eff92002dffd40087ff7c00b800a800e5008f00a8
0185fe7b0070001e00d900de014c054602cf0546ff2d028a02d902530296
00b700000000000000000000000000000125011800ea00ea00ae0000003e
05bb008a04d70053003fff8cffd500150028002200990062004a00e4006d
00ee00e5004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a
0068ff6c004f00bc00a507050061072b00ed04b001d200b6007b00650252
ff740365fe690094008f005c004000860075008900890471048304f9008c
00910096009b00a000a500aa00af00b400b90000405b8574737271706f6e
6d6c6b6a6968676665625d58575655544f4e41403f3e3d3c3b3a39383735
34333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817
161514131211100f0e0d0c0b0a090807060504030201002c4523466020b0
2660b004262348482d2c452346236120b02661b004262348482d2c452346
60b0206120b04660b004262348482d2c4523462361b0206020b02661b020
61b004262348482d2c45234660b0406120b06660b004262348482d2c4523
462361b0406020b02661b04061b004262348482d2c0110203c003c2d2c20
452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44
235920b09051582320b00d44235921212d2c20204518684420b001602045
b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d
2c00b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a
234445b01923442d2c2045b00325456164b050515845441b2121592d2cb0
0143632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb0172344
2d2cb01243588745b0112bb0172344b0177ae41b038a45186920b0172344
8a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c
2d2cb0022546608a46b040618c482d2c4b53205c58b002855958b0018559
2d2c20b0032545b019234445b01a23444565234520b00325606a20b00923
4223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a5458
2321b03f1b235961441cb114008a5279b31940201945208a54582321b03f
1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323
430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343
650b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4bb0
6451584569b00943608a103a1b212121592d2c01b005251023208af500b0
016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510
f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c
b02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802
2323701020b802234520b0005058b00161593a2f182d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2cb4000100000015b00826b00826b00826b008
260f10161345683ab001162d2cb4000100000015b00826b00826b00826b0
08260f1016134568653ab001162d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d
2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2c4b5258b00425b0
042549b00425b00425496120b0005458212043b0005558b00325b00325b8
ffc038b8ffc038591bb04054582043b0005458b00225b8ffc038591b2043
b0005458b00325b00325b8ffc038b8ffc0381bb00325b8ffc03859595959
212121212d2c462346608a8a462320468a608a61b8ff8062232010238ab9
02c202c28a70456020b0005058b00161b8ffba8b1bb0468c59b010606801
3a2d2c2320b000508a8a64b10003255458b0401bb10103255458b037438b
59b04f2b5923b0622b2321235865592d2cb13a000c215460432d2cb10200
42b123018851b1400188535a58b910000020885458b202010243604259b1
2401885158b920000040885458b2020202436042b12401885458b2022002
436042004b014b5258b2020802436042591bb940000080885458b2020402
43604259b94000008063b80100885458b202080243604259b94000010063
b80200885458b202100243604259b12601885158b94000020063b8040088
5458b202400243604259b94000040063b80800885458b202800243604259
b12801885158b94000080063b81000885458ba0002010000024360425959
5959595959b10002435458400a37403a403b403e023f021bb10102435458
b237403aba0100003b0100b33e013f011bb18002435258b237403ab80180
b13b401bb901000002435258b237403aba0180003b01401bb90180000243
5258b237403ab80200b13b401bb237403aba0100003b0100595959b94000
00808855b94000020063b8040088555a58b33e003f011bb33e003f015959
5942424242422d2cb0024354584b53234b515a58381b2121591b21212121
592d2cb0572b580c028a4b53b004264b515a580a381b0a2121591b212121
21592d2c20b0024354b00123b05f237821b1000243b056237921b0024323
b020205c58212121b100471c598a8a208a208a23b81000635658b8100063
5658212121b1012c1c591b2159b08062205c58212121b1001b1c5923b080
62205c58212121b1000c1c598ab00161b8ffb31c23212d2c20b0024354b0
0123b07b237821b1000243b072237921b10002438ab020205c58212121b0
631c598a8a208a208a23b81000635658b81000635658b00426b0015bb004
26b00426b004261b21212121b13600231c591b2159b0042623b08062205c
588a5c8a5a23212321b01d1c598ab08062205c5821212321b00e1c59b004
26b00161b8ff981c23212d2c012d2cb0022563b0206066b00225b8200062
6023622d2c234ab1024e2b2d2c234ab1014e2b2d2c238a4a234564b00225
64b002256164b03543525821206459b1024e2b23b000505865592d2c238a
4a234564b0022564b002256164b03543525821206459b1014e2b23b00050
5865592d2c20b003254ab1024e2b8a103b2d2c20b003254ab1014e2b8a10
3b2d2cb00325b003258ab0672b8a103b2d2cb00325b003258ab0682b8a10
3b2d2cb0032546b003254660b004252eb00425b00425b0042620b0005058
21b06a1bb06c592bb0032546b00325466061b08062208a2010233a232010
233a2d2cb0032547b003254760b0052547b0806361b00225b00625496323
b005254ab080632058621b2159b0042646608a468a4660b02063612d2cb0
0426b00425b00425b00426b06e2b208a2010233a232010233a2d2c2320b0
01545821b00225b1024e2bb0805020605920606020b001515821211b20b0
05515821206661b0402361b100032550b00325b00325505a5820b0032561
8a535821b000591b21591bb00754582066616523211b2121b000595959b1
024e2b2d2cb00225b004254ab0005358b0001b8a8a238ab00159b0042546
20666120b00526b0062649b00526b00526b0702b236165b02060206661b0
2061652d2cb0022546208a20b000505821b1024e2b1b452321596165b002
25103b2d2cb0042620b802006220b80200638a236120b05d602bb0052511
8a128a20398a58ba005d10000004266356602b23212010204620b1024e2b
23611b2321208a201049b1024e2b593b2d2cba005d10000009256356602b
b00525b00525b00526b06d2bb15d0725602bb00525b00525b00525b00525
b06f2bba005d10000008266356602b20b0005258b0502bb00525b00525b0
0725b00725b00525b0712bb0021738b00052b00225b001525a58b00425b0
062549b00325b00525496020b0405258211bb000525820b0025458b00425
b00425b00725b0072549b00217381bb00425b00425b00425b0062549b002
1738595959595921212121212d2cb12501885058b94000020063b8040088
545cb0124b525b1bb001592d0001000000070000b1b0afba5f0f3cf5081b
080000000000a2e3272a00000000d684e4ecfaaffd671000085100000009
000100000000000000010000073efe4e00431000faaffa7a100000010000
000000000000000000000000005d06000100060001000600010002390000
023900000239000002390000023900000239000002390000023900000239
000002aa007c02aa007c02aa007c02aa007c02aa007c02aa007c02aa007c
04730055047300df0473003c047300560473001a047300550473004d0473
004d0473004d0473004d0473004d0473004d0473004d0473004d0473004d
0473004d0473004d0473004d0473004d0473004d0473004d0473004d04e3
00a804e300a804e300a804e300a804e300a804e300a804e300a804e300a8
05c7009c05c7009c0556009e0556009e0556009e0556005c0556005c0556
005c0556005c0556005c0556005c0556005c0556005c0556005c0556005c
0556005c0556005c0556005c0556005c0473004a04730086040000500473
00460473004b02390013047300420473004201c7008801c7008801c70088
01c7008306aa00870473008704730044047300870473004802aa00850400
003f02390024047300830400001a05c7000605c700060400002100000036
003600360036003600360036003600360036003600360092009200920092
00920092009201c4026103a604e2060d0742087a087a087a087a087a087a
087a087a087a087a087a087a087a087a087a087a08f808f808f808f808f8
08f808f808f80a0f0a0f0ad00ad00ad00cbb0cbb0cbb0cbb0cbb0cbb0cbb
0cbb0cbb0cbb0cbb0cbb0cbb0cbb0e9f0fd71134126d13ae148115d615d6
16ee16ee16ee17bb19a71abe1be91d041e131eb5210c21e922ec24372754
275428e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e728e728e728e728e728e728e728e728e728e728e728e728e728e7
28e728e700010000119702b5003c00ca0007000200100040008600000517
05ec000500020000003a02be0000000300000000021a0000000000030000
0001000a021a0000000300000002000e0224000000030000000300440232
0000000300000004000a021a000000030000000500180276000000030000
0006000e028e00000003000000070064029c00000003000000080030000e
0000000300000009008a0300000000030000000d0e04038a000100000000
0000010d118e00010000000000010005129b0001000000000002000712a0
0001000000000003002212a700010000000000040005129b000100000000
0005000c12c90001000000000006000712d50001000000000007003112dc
00010000000000080018119500010000000000090045130d000100000000
000d070213520003000104030002000c1a54000300010405000200101a60
0003000104060002000c1a70000300010407000200101a7c000300010408
000200101a8c0003000104090000021e1a9c0003000104090001000a021a
0003000104090002000e0224000300010409000300440232000300010409
0004000a021a0003000104090005001802760003000104090006000e028e
000300010409000700621cba00030001040900080030000e000300010409
0009008a0300000300010409000d0e141d1c00030001040a0002000c1a54
00030001040b000200102b3000030001040c0002000c1a5400030001040e
0002000c2b400003000104100002000e2b4c000300010413000200122b5a
0003000104140002000c1a54000300010415000200102b6c000300010416
0002000c1a540003000104190002000e2b7c00030001041b000200102b8a
00030001041d0002000c1a5400030001041f0002000c1a54000300010424
0002000e2b9a00030001042a0002000e2ba800030001042d0002000e2bb6
00030001080a0002000c1a540003000108160002000c1a54000300010c0a
0002000c1a54000300010c0c0002000c1a5400a900200032003000310037
00200054006800650020004d006f006e006f007400790070006500200043
006f00720070006f0072006100740069006f006e002e00200041006c006c
002000520069006700680074007300200052006500730065007200760065
0064002e0020000d000d0048006500620072006500770020004f00700065
006e00540079007000650020004c00610079006f007500740020006c006f
00670069006300200063006f0070007900720069006700680074002000a9
002000320030003000330020002600200032003000300037002c00200052
0061006c00700068002000480061006e0063006f0063006b002000260020
004a006f0068006e00200048007500640073006f006e002e002000540068
006900730020006c00610079006f007500740020006c006f006700690063
00200066006f00720020004200690062006c006900630061006c00200048
006500620072006500770020006900730020006f00700065006e00200073
006f007500720063006500200073006f0066007400770061007200650020
0075006e00640065007200200074006800650020004d004900540020004c
006900630065006e00730065003b002000730065006500200065006d0062
006500640064006500640020006c006900630065006e0073006500200064
00650073006300720069007000740069006f006e00200066006f00720020
00640065007400610069006c0073002e0041007200690061006c00520065
00670075006c00610072004d006f006e006f0074007900700065003a0041
007200690061006c00200052006500670075006c0061007200200028004d
006900630072006f0073006f00660074002900560065007200730069006f
006e00200037002e003000300041007200690061006c004d005400410072
00690061006c002000200069007300200061002000740072006100640065
006d00610072006b0020006f006600200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e002e004d006f006e006f00740079007000650020005400790070
0065002000440072006100770069006e00670020004f0066006600690063
00650020002d00200052006f00620069006e0020004e006900630068006f
006c00610073002c00200050006100740072006900630069006100200053
00610075006e006400650072007300200031003900380032004d00690063
0072006f0073006f0066007400200073007500700070006c006900650064
00200066006f006e0074002e00200059006f00750020006d006100790020
0075007300650020007400680069007300200066006f006e007400200074
006f0020006300720065006100740065002c00200064006900730070006c
00610079002c00200061006e00640020007000720069006e007400200063
006f006e00740065006e00740020006100730020007000650072006d0069
007400740065006400200062007900200074006800650020006c00690063
0065006e007300650020007400650072006d00730020006f007200200074
00650072006d00730020006f00660020007500730065002c0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00700072006f0064007500630074002c0020007300650072007600690063
0065002c0020006f007200200063006f006e00740065006e007400200069
006e0020007700680069006300680020007400680069007300200066006f
006e0074002000770061007300200069006e0063006c0075006400650064
002e00200059006f00750020006d006100790020006f006e006c00790020
00280069002900200065006d006200650064002000740068006900730020
0066006f006e007400200069006e00200063006f006e00740065006e0074
0020006100730020007000650072006d0069007400740065006400200062
0079002000740068006500200065006d00620065006400640069006e0067
0020007200650073007400720069006300740069006f006e007300200069
006e0063006c007500640065006400200069006e00200074006800690073
00200066006f006e0074003b00200061006e006400200028006900690029
002000740065006d0070006f0072006100720069006c007900200064006f
0077006e006c006f006100640020007400680069007300200066006f006e
007400200074006f002000610020007000720069006e0074006500720020
006f00720020006f00740068006500720020006f00750074007000750074
002000640065007600690063006500200074006f002000680065006c0070
0020007000720069006e007400200063006f006e00740065006e0074002e
00200041006e00790020006f007400680065007200200075007300650020
00690073002000700072006f0068006900620069007400650064002e000d
000d00540068006500200066006f006c006c006f00770069006e00670020
006c006900630065006e00730065002c0020006200610073006500640020
006f006e00200074006800650020004d004900540020006c006900630065
006e00730065002000280068007400740070003a002f002f0065006e002e
00770069006b006900700065006400690061002e006f00720067002f0077
0069006b0069002f004d00490054005f004c006900630065006e00730065
0029002c0020006100700070006c00690065007300200074006f00200074
006800650020004f00700065006e00540079007000650020004c00610079
006f007500740020006c006f00670069006300200066006f007200200042
00690062006c006900630061006c00200048006500620072006500770020
201c004c00610079006f007500740020004c006f006700690063201d0020
006100730020006a006f0069006e0074006c007900200064006500760065
006c006f007000650064002000620079002000520061006c007000680020
00480061006e0063006f0063006b00200061006e00640020004a006f0068
006e00200048007500640073006f006e002e0020000d000d005000650072
006d0069007300730069006f006e00200069007300200068006500720065
006200790020006700720061006e007400650064002c0020006600720065
00650020006f00660020006300680061007200670065002c00200074006f
00200061006e007900200070006500720073006f006e0020006f00620074
00610069006e0069006e00670020006100200063006f007000790020006f
006600200074006800650020004f00700065006e00540079007000650020
004c00610079006f007500740020006c006f00670069006300200066006f
00720020004200690062006c006900630061006c00200048006500620072
0065007700200061006e00640020006100730073006f0063006900610074
0065006400200064006f00630075006d0065006e0074006100740069006f
006e002000660069006c00650073002000280074006800650020201c004c
00610079006f007500740020004c006f00670069006300200053006f0066
00740077006100720065201d0029002c00200074006f0020006400650061
006c00200069006e00200074006800650020004c00610079006f00750074
0020004c006f00670069006300200053006f006600740077006100720065
00200077006900740068006f007500740020007200650073007400720069
006300740069006f006e002c00200069006e0063006c007500640069006e
006700200077006900740068006f007500740020006c0069006d00690074
006100740069006f006e0020007400680065002000720069006700680074
007300200074006f0020007500730065002c00200063006f00700079002c
0020006d006f0064006900660079002c0020006d0065007200670065002c
0020007000750062006c006900730068002c002000640069007300740072
00690062007500740065002c0020007300750062006c006900630065006e
00730065002c00200061006e0064002f006f0072002000730065006c006c
00200063006f00700069006500730020006f006600200074006800650020
004c00610079006f007500740020004c006f00670069006300200053006f
006600740077006100720065002c00200061006e006400200074006f0020
007000650072006d0069007400200070006500720073006f006e00730020
0074006f002000770068006f006d00200074006800650020004c00610079
006f007500740020004c006f00670069006300200053006f006600740077
0061007200650020006900730020006600750072006e0069007300680065
006400200074006f00200064006f00200073006f002c0020007300750062
006a00650063007400200074006f002000740068006500200066006f006c
006c006f00770069006e006700200063006f006e0064006900740069006f
006e0073003a000d000d005400680065002000610062006f007600650020
0063006f00700079007200690067006800740020006e006f007400690063
006500200061006e0064002000740068006900730020007000650072006d
0069007300730069006f006e0020006e006f007400690063006500200073
00680061006c006c00200062006500200069006e0063006c007500640065
006400200069006e00200061006c006c00200063006f0070006900650073
0020006f00720020007300750062007300740061006e007400690061006c
00200070006f007200740069006f006e00730020006f0066002000740068
00650020004c00610079006f007500740020004c006f0067006900630020
0053006f006600740077006100720065002e000d000d0054004800450020
0053004f004600540057004100520045002000490053002000500052004f
0056004900440045004400200027004100530020004900530027002c0020
0057004900540048004f00550054002000570041005200520041004e0054
00590020004f004600200041004e00590020004b0049004e0044002c0020
00450058005000520045005300530020004f005200200049004d0050004c
004900450044002c00200049004e0043004c005500440049004e00470020
0042005500540020004e004f00540020004c0049004d0049005400450044
00200054004f0020005400480045002000570041005200520041004e0054
0049004500530020004f00460020004d00450052004300480041004e0054
004100420049004c004900540059002c0020004600490054004e00450053
005300200046004f00520020004100200050004100520054004900430055
004c0041005200200050005500520050004f0053004500200041004e0044
0020004e004f004e0049004e004600520049004e00470045004d0045004e
0054002e00200049004e0020004e004f0020004500560045004e00540020
005300480041004c004c002000540048004500200041005500540048004f
005200530020004f005200200043004f0050005900520049004700480054
00200048004f004c00440045005200530020004200450020004c00490041
0042004c004500200046004f005200200041004e005900200043004c0041
0049004d002c002000440041004d00410047004500530020004f00520020
004f00540048004500520020004c0049004100420049004c004900540059
002c0020005700480045005400480045005200200049004e00200041004e
00200041004300540049004f004e0020004f004600200043004f004e0054
0052004100430054002c00200054004f005200540020004f00520020004f
00540048004500520057004900530045002c002000410052004900530049
004e0047002000460052004f004d002c0020004f005500540020004f0046
0020004f005200200049004e00200043004f004e004e0045004300540049
004f004e00200057004900540048002000540048004500200053004f0046
005400570041005200450020004f00520020005400480045002000550053
00450020004f00520020004f00540048004500520020004400450041004c
0049004e0047005300200049004e002000540048004500200053004f0046
00540057004100520045002ea9203230313720546865204d6f6e6f747970
6520436f72706f726174696f6e2e20416c6c205269676874732052657365
727665642e200d0d486562726577204f70656e54797065204c61796f7574
206c6f67696320636f7079726967687420a9203230303320262032303037
2c2052616c70682048616e636f636b2026204a6f686e20487564736f6e2e
2054686973206c61796f7574206c6f67696320666f72204269626c696361
6c20486562726577206973206f70656e20736f7572636520736f66747761
726520756e64657220746865204d4954204c6963656e73653b2073656520
656d626564646564206c6963656e7365206465736372697074696f6e2066
6f722064657461696c732e417269616c526567756c61724d6f6e6f747970
653a417269616c20526567756c617220284d6963726f736f667429566572
73696f6e20372e3030417269616c4d54417269616c206973206120747261
64656d61726b206f6620546865204d6f6e6f7479706520436f72706f7261
74696f6e2e4d6f6e6f7479706520547970652044726177696e67204f6666
696365202d20526f62696e204e6963686f6c61732c205061747269636961
205361756e6465727320313938324d6963726f736f667420737570706c69
656420666f6e742e20596f75206d617920757365207468697320666f6e74
20746f206372656174652c20646973706c61792c20616e64207072696e74
20636f6e74656e74206173207065726d697474656420627920746865206c
6963656e7365207465726d73206f72207465726d73206f66207573652c20
6f6620746865204d6963726f736f66742070726f647563742c2073657276
6963652c206f7220636f6e74656e7420696e207768696368207468697320
666f6e742077617320696e636c756465642e20596f75206d6179206f6e6c
792028692920656d626564207468697320666f6e7420696e20636f6e7465
6e74206173207065726d69747465642062792074686520656d6265646469
6e67207265737472696374696f6e7320696e636c7564656420696e207468
697320666f6e743b20616e6420286969292074656d706f726172696c7920
646f776e6c6f6164207468697320666f6e7420746f2061207072696e7465
72206f72206f74686572206f75747075742064657669636520746f206865
6c70207072696e7420636f6e74656e742e20416e79206f74686572207573
652069732070726f686962697465642e0d0d54686520666f6c6c6f77696e
67206c6963656e73652c206261736564206f6e20746865204d4954206c69
63656e73652028687474703a2f2f656e2e77696b6970656469612e6f7267
2f77696b692f4d49545f4c6963656e7365292c206170706c69657320746f
20746865204f70656e54797065204c61796f7574206c6f67696320666f72
204269626c6963616c2048656272657720d24c61796f7574204c6f676963
d3206173206a6f696e746c7920646576656c6f7065642062792052616c70
682048616e636f636b20616e64204a6f686e20487564736f6e2e200d0d50
65726d697373696f6e20697320686572656279206772616e7465642c2066
726565206f66206368617267652c20746f20616e7920706572736f6e206f
627461696e696e67206120636f7079206f6620746865204f70656e547970
65204c61796f7574206c6f67696320666f72204269626c6963616c204865
6272657720616e64206173736f63696174656420646f63756d656e746174
696f6e2066696c6573202874686520d24c61796f7574204c6f6769632053
6f667477617265d3292c20746f206465616c20696e20746865204c61796f
7574204c6f67696320536f66747761726520776974686f75742072657374
72696374696f6e2c20696e636c7564696e6720776974686f7574206c696d
69746174696f6e207468652072696768747320746f207573652c20636f70
792c206d6f646966792c206d657267652c207075626c6973682c20646973
747269627574652c207375626c6963656e73652c20616e642f6f72207365
6c6c20636f70696573206f6620746865204c61796f7574204c6f67696320
536f6674776172652c20616e6420746f207065726d697420706572736f6e
7320746f2077686f6d20746865204c61796f7574204c6f67696320536f66
7477617265206973206675726e697368656420746f20646f20736f2c2073
75626a65637420746f2074686520666f6c6c6f77696e6720636f6e646974
696f6e733a0d0d5468652061626f766520636f70797269676874206e6f74
69636520616e642074686973207065726d697373696f6e206e6f74696365
207368616c6c20626520696e636c7564656420696e20616c6c20636f7069
6573206f72207375627374616e7469616c20706f7274696f6e73206f6620
746865204c61796f7574204c6f67696320536f6674776172652e0d0d5448
4520534f4654574152452049532050524f56494445442027415320495327
2c20574954484f55542057415252414e5459204f4620414e59204b494e44
2c2045585052455353204f5220494d504c4945442c20494e434c5544494e
4720425554204e4f54204c494d4954454420544f20544845205741525241
4e54494553204f46204d45524348414e544142494c4954592c204649544e
45535320464f52204120504152544943554c415220505552504f53452041
4e44204e4f4e494e4652494e47454d454e542e20494e204e4f204556454e
54205348414c4c2054484520415554484f5253204f5220434f5059524947
485420484f4c44455253204245204c4941424c4520464f5220414e592043
4c41494d2c2044414d41474553204f52204f54484552204c494142494c49
54592c205748455448455220494e20414e20414354494f4e204f4620434f
4e54524143542c20544f5254204f52204f54484552574953452c20415249
53494e472046524f4d2c204f5554204f46204f5220494e20434f4e4e4543
54494f4e20574954482054484520534f465457415245204f522054484520
555345204f52204f54484552204445414c494e475320494e205448452053
4f4654574152452e004e006f0072006d0061006c006f00620079010d0065
006a006e00e9006e006f0072006d0061006c005300740061006e00640061
00720064039a03b103bd03bf03bd03b903ba03ac00a90020003200300031
003700200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200052006900670068007400730020005200650073006500720076
00650064002e0020000d000a000d000a0048006500620072006500770020
004f00700065006e00540079007000650020004c00610079006f00750074
0020006c006f00670069006300200063006f007000790072006900670068
0074002000a9002000320030003000330020002600200032003000300037
002c002000520061006c00700068002000480061006e0063006f0063006b
002000260020004a006f0068006e00200048007500640073006f006e002e
002000540068006900730020006c00610079006f007500740020006c006f
00670069006300200066006f00720020004200690062006c006900630061
006c00200048006500620072006500770020006900730020006f00700065
006e00200073006f007500720063006500200073006f0066007400770061
0072006500200075006e00640065007200200074006800650020004d0049
00540020004c006900630065006e00730065003b00200073006500650020
0065006d0062006500640064006500640020006c006900630065006e0073
00650020006400650073006300720069007000740069006f006e00200066
006f0072002000640065007400610069006c0073002e0041007200690061
006c00200069007300200061002000740072006100640065006d00610072
006b0020006f006600200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e002e
004d006900630072006f0073006f0066007400200073007500700070006c
00690065006400200066006f006e0074002e00200059006f00750020006d
0061007900200075007300650020007400680069007300200066006f006e
007400200074006f0020006300720065006100740065002c002000640069
00730070006c00610079002c00200061006e00640020007000720069006e
007400200063006f006e00740065006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
006c006900630065006e007300650020007400650072006d00730020006f
00720020007400650072006d00730020006f00660020007500730065002c
0020006f006600200074006800650020004d006900630072006f0073006f
00660074002000700072006f0064007500630074002c0020007300650072
0076006900630065002c0020006f007200200063006f006e00740065006e
007400200069006e00200077006800690063006800200074006800690073
00200066006f006e0074002000770061007300200069006e0063006c0075
006400650064002e00200059006f00750020006d006100790020006f006e
006c0079002000280069002900200065006d006200650064002000740068
0069007300200066006f006e007400200069006e00200063006f006e0074
0065006e00740020006100730020007000650072006d0069007400740065
0064002000620079002000740068006500200065006d0062006500640064
0069006e00670020007200650073007400720069006300740069006f006e
007300200069006e0063006c007500640065006400200069006e00200074
00680069007300200066006f006e0074003b00200061006e006400200028
006900690029002000740065006d0070006f0072006100720069006c0079
00200064006f0077006e006c006f00610064002000740068006900730020
0066006f006e007400200074006f002000610020007000720069006e0074
006500720020006f00720020006f00740068006500720020006f00750074
007000750074002000640065007600690063006500200074006f00200068
0065006c00700020007000720069006e007400200063006f006e00740065
006e0074002e00200041006e00790020006f007400680065007200200075
00730065002000690073002000700072006f006800690062006900740065
0064002e000d000a000d000a00540068006500200066006f006c006c006f
00770069006e00670020006c006900630065006e00730065002c00200062
00610073006500640020006f006e00200074006800650020004d00490054
0020006c006900630065006e00730065002000280068007400740070003a
002f002f0065006e002e00770069006b006900700065006400690061002e
006f00720067002f00770069006b0069002f004d00490054005f004c0069
00630065006e007300650029002c0020006100700070006c006900650073
00200074006f00200074006800650020004f00700065006e005400790070
00650020004c00610079006f007500740020006c006f0067006900630020
0066006f00720020004200690062006c006900630061006c002000480065
00620072006500770020201c004c00610079006f007500740020004c006f
006700690063201d0020006100730020006a006f0069006e0074006c0079
00200064006500760065006c006f00700065006400200062007900200052
0061006c00700068002000480061006e0063006f0063006b00200061006e
00640020004a006f0068006e00200048007500640073006f006e002e0020
000d000a000d000a005000650072006d0069007300730069006f006e0020
0069007300200068006500720065006200790020006700720061006e0074
00650064002c002000660072006500650020006f00660020006300680061
007200670065002c00200074006f00200061006e00790020007000650072
0073006f006e0020006f0062007400610069006e0069006e006700200061
00200063006f007000790020006f006600200074006800650020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200066006f00720020004200690062006c00690063
0061006c002000480065006200720065007700200061006e006400200061
00730073006f00630069006100740065006400200064006f00630075006d
0065006e0074006100740069006f006e002000660069006c006500730020
00280074006800650020201c004c00610079006f007500740020004c006f
00670069006300200053006f006600740077006100720065201d0029002c
00200074006f0020006400650061006c00200069006e0020007400680065
0020004c00610079006f007500740020004c006f00670069006300200053
006f00660074007700610072006500200077006900740068006f00750074
0020007200650073007400720069006300740069006f006e002c00200069
006e0063006c007500640069006e006700200077006900740068006f0075
00740020006c0069006d00690074006100740069006f006e002000740068
0065002000720069006700680074007300200074006f0020007500730065
002c00200063006f00700079002c0020006d006f0064006900660079002c
0020006d0065007200670065002c0020007000750062006c006900730068
002c00200064006900730074007200690062007500740065002c00200073
00750062006c006900630065006e00730065002c00200061006e0064002f
006f0072002000730065006c006c00200063006f00700069006500730020
006f006600200074006800650020004c00610079006f007500740020004c
006f00670069006300200053006f006600740077006100720065002c0020
0061006e006400200074006f0020007000650072006d0069007400200070
006500720073006f006e007300200074006f002000770068006f006d0020
0074006800650020004c00610079006f007500740020004c006f00670069
006300200053006f00660074007700610072006500200069007300200066
00750072006e0069007300680065006400200074006f00200064006f0020
0073006f002c0020007300750062006a00650063007400200074006f0020
00740068006500200066006f006c006c006f00770069006e006700200063
006f006e0064006900740069006f006e0073003a000d000a000d000a0054
00680065002000610062006f0076006500200063006f0070007900720069
0067006800740020006e006f007400690063006500200061006e00640020
00740068006900730020007000650072006d0069007300730069006f006e
0020006e006f00740069006300650020007300680061006c006c00200062
006500200069006e0063006c007500640065006400200069006e00200061
006c006c00200063006f00700069006500730020006f0072002000730075
0062007300740061006e007400690061006c00200070006f007200740069
006f006e00730020006f006600200074006800650020004c00610079006f
007500740020004c006f00670069006300200053006f0066007400770061
00720065002e000d000a000d000a00540048004500200053004f00460054
0057004100520045002000490053002000500052004f0056004900440045
004400200027004100530020004900530027002c00200057004900540048
004f00550054002000570041005200520041004e005400590020004f0046
00200041004e00590020004b0049004e0044002c00200045005800500052
0045005300530020004f005200200049004d0050004c004900450044002c
00200049004e0043004c005500440049004e004700200042005500540020
004e004f00540020004c0049004d004900540045004400200054004f0020
005400480045002000570041005200520041004e00540049004500530020
004f00460020004d00450052004300480041004e0054004100420049004c
004900540059002c0020004600490054004e00450053005300200046004f
00520020004100200050004100520054004900430055004c004100520020
0050005500520050004f0053004500200041004e00440020004e004f004e
0049004e004600520049004e00470045004d0045004e0054002e00200049
004e0020004e004f0020004500560045004e00540020005300480041004c
004c002000540048004500200041005500540048004f005200530020004f
005200200043004f005000590052004900470048005400200048004f004c
00440045005200530020004200450020004c004900410042004c00450020
0046004f005200200041004e005900200043004c00410049004d002c0020
00440041004d00410047004500530020004f00520020004f005400480045
00520020004c0049004100420049004c004900540059002c002000570048
0045005400480045005200200049004e00200041004e0020004100430054
0049004f004e0020004f004600200043004f004e00540052004100430054
002c00200054004f005200540020004f00520020004f0054004800450052
0057004900530045002c002000410052004900530049004e004700200046
0052004f004d002c0020004f005500540020004f00460020004f00520020
0049004e00200043004f004e004e0045004300540049004f004e00200057
004900540048002000540048004500200053004f00460054005700410052
00450020004f0052002000540048004500200055005300450020004f0052
0020004f00540048004500520020004400450041004c0049004e00470053
00200049004e002000540048004500200053004f00460054005700410052
0045002e004e006f0072006d00610061006c0069004e006f0072006d00e1
006c004e006f0072006d0061006c0065005300740061006e006400610061
00720064004e006f0072006d0061006c006e0079041e0431044b0447043d
044b0439004e006f0072006d00e1006c006e0065004e0061007600610064
006e006f0074006801b001a10300006e00670041007200720075006e0074
00610000b15485410b032c032c032c0222001d001f032b032a003c001f03
2ab2061d1fb80328b326181fd0bc032900e0032900020329b22b1d1fb903
27031db23b1f40b80323b31215320f412d03200001002f03200001002003
20006f032000af032000bf03200004005f031e00010010031e007f031e00
80031e00af031e00bf031e00d0031e00060000031e0010031e0020031e00
6f031e009f031e00e0031e0006031d031cb2201f1041270319007f031900
02000f031700ef031700ff03170003001f0317002f0317004f0317005f03
17008f0317009f03170006000f0317005f0317006f0317007f031700bf03
1700f00317000600400317b2923340b80317b28b3340b80317b36a6c3240
b80317b2613340b80317b35c5d3240b80317b357593240b80317b34d5132
40b80317b344493240b80317b23a3340b80317b331343240b80317b32e42
3240b80317b3272c3240b80317b312253280b80317b30a0d32c041160316
00d00316000200700316000102c4000f0101001f00a0031500b003150002
0306000f0101001f00400312b32426329fbf03040001030203010064001f
ffc00301b20d1132410a02ff02ef0012001f02ee02ed0064001fffc002ed
b30e11329f414a02e200af02e200bf02e2000302e202e202e102e1007f02
e00001001002e0003f02e0009f02e000bf02e000cf02e000ef02e0000602
e002e002df02df02de02de000f02dd002f02dd003f02dd005f02dd009f02
dd00bf02dd00ef02dd000702dd02dd001002dc0001000002dc0001001002
dc003f02dc000202dc02dc001002db000102db02db000f02da000102da02
daffc002d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc0
02d3b2171b32b9ffc002d3b2121632b802d2b2f9291fb90326031cb23b1f
40bb0322003e00330322b225311fb80318b23c691fb802e3b3202b1fa041
3002d400b002d40002000002d4001002d4002002d4005002d4006002d400
7002d40006006002d6007002d6008002d6009002d600a002d600b002d600
06000002d6001002d6002002ca002002cc002002d6003002d6004002d600
5002d6000802d0b2202b1fb802cfb226421f411602ce02c70017001f02cd
02c80017001f02cc02c60017001f02cb02c50017001f02c902c5001e001f
02ca02c6b21e1f00410b02c6000002c7001002c6001002c7002f02c50005
02c1b324121fff411102bf0001001f02bf002f02bf003f02bf004f02bf00
5f02bf008f02bf000602bf0222b2641f12410b02bb00ca0800001f02b200
e90800001f02a600a20800406a1f4026434932402043493240263a3d3240
203a3d329f209f26024026969932402096993240268e923240208e923240
26848c324020848c3240267a813240207a813240266c763240206c763240
26646a324020646a3240265a5f3240205a5f3240264f543240204f5432b8
029eb724271f374f6b0120410f0277003002770040027700500277000402
770277027700f90400001f029bb22a2a1fb8029a402b292a1f80ba0180bc
0180520180a201806501807e01808101803c01805e01802b01801c01801e
0180400180bb0138000100800140b40180400180bb013800010080013940
180180ca0180ad018073018026018025018024018020013740b80221b249
3340b80221b2453340b80221b341423240b80221b33d3e320f410f022100
3f0221007f0221000300bf022100cf022100ff0221000300400221b32022
3240b80221b3191e3240b80222b32a3f3240b80221b32e3a326f414a02c3
007f02c3008f02c300df02c30004002f02c3006002c300cf02c30003000f
02c3003f02c3005f02c300c002c300ef02c300ff02c3000600df02220001
008f02220001000f0222002f0222003f0222005f0222007f022200ef0222
000600bf022100ef02210002006f0221007f022100af02210003000f0221
002f0221003f0221004f0221000402c302c30222022202210221401d101c
102b1048038f1c010f1e014f1eff1e023700161600000012110811b8010d
b6f70df8f70d00094109028e028f001d001f0290028f001d001f028fb2f9
1d1fb80198b226bb1f41150197001e0401001f013900260125001f013800
730401001f0135001c0801001f0134001c02ab001f0132b21c561fb8010f
b2262c1fba010e001e0401b61ff91ce41fe91cb80201b61fe81cbb1fd720
b80401b21fd51cb802abb61fd41c891fc92fb80801b21fbc26b80101b21f
ba20b80201b61fb91c381fadcab80401b21f8126b8019ab21f7e26b8019a
b61f7d1c471f6b1cb80401b21f6526b8019ab21f5e73b80401400f1f5226
5a1f481c891f441c621f4073b80801b61f3f1c5e1f3c26b8019ab21f351c
b80401b61f301cbb1f2b1cb80401b61f2a1c561f291cb80101b21f231eb8
0401b41f35555537b80168402c07960758074f07360732072c0721071f07
1d071b071408120810080e080c080a080808060804080208000814b8ffe0
402b00000100140610000001000604000001000410000001001002000001
000200000001000002010802004a00b013034b024b5342014bb0c063004b
6220b0f65323b8010a515ab005234201b0124b004b5442b0382b4bb807ff
52b0372b4bb007505b58b101018e59b0382bb00288b801005458b801ffb1
01018e851bb0124358b900010111858d1bb900010128858d595900181676
3f183f123e113946443e113946443e113946443e113946443e1139466044
3e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b18
2b1d42b0964b5358b235aaaa1d4259b0324b5358b235ffff1d42594bb093
53205c58b901f201f04544b901f101f045445958b9033e01f2455258b901
f2033e4459594bb8015653205c58b9002001f14544b9002601f145445958
b9081e0020455258b90020081e4459594bb8019a53205c58b9002501f245
44b9002401f245445958b909090025455258b9002509094459594bb80401
53205c58b173244544b1242445445958b917200073455258b90073172044
59594bb8040153205c58b1ca254544b1252545445958b9168000ca455258
b900ca16804459594bb03e53205c58b11c1c4544b11e1c45445958b9011a
001c455258b9001c011a4459594bb05653205c58b11c1c4544b12f1c4544
5958b90189001c455258b9001c01894459594bb8030153205c58b11c1c45
44b11c1c45445958b90de0001c455258b9001c0de04459592b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b65422b2b01b33b59635c456523456023456560234560b08b76
6818b080622020b163594565234520b003266062636820b003266165b059
236544b063234420b13b5c4565234520b003266062636820b003266165b0
5c236544b03b2344b1005c455458b15c406544b23b403b4523614459b347
503437456523456023456560234560b089766818b080622020b134504565
234520b003266062636820b003266165b050236544b034234420b1473745
65234520b003266062636820b003266165b037236544b0472344b1003745
5458b137406544b24740474523614459004b5342014b5058b10800425943
5c58b108004259b3020b0a124358601b2159421610703eb0124358b93b21
187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411b
ba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a8
0400000b2b59b0102342b0112342002b7475737500184569444569444569
447373737374757374752b2b2b2b74752b2b2b2b2b737373737373737373
737373737373737373737373737373732b2b2b45b0406144737400004bb0
2a534bb03f515a58b1070745b040604459004bb03a534bb03f515a58b10b
0b45b8ffc0604459004bb02e534bb03a515a58b1030345b040604459004b
b02e534bb03c515a58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b752b2b2b2b2b2b2b435c58b9008002bbb301401e017400
735903b01e4b5402b0124b545ab012435c5a58ba009f0222000100735900
2b7473012b01732b2b2b2b2b2b2b2b737373732b2b2b2b2b002b2b2b2b2b
2b0045694473456944734569447374754569447345694445694445694473
74456944456944732b2b2b2b2b732b002b732b74752b2b2b2b2b2b2b2b2b
2b2b2b2b2b737475732b7374757374752b2b2b742b002b2b2b0018456944
2b5c58410e0336032f0041001f0330032f002d001f032d032f0032001f03
32032f4012261f0302371f0908371f0b0a441f0706441f2b2b2b2b2b2b2b
2b592b0000>
[14857 6087 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> IAAAAA+ArialMT AddT42Char 
1 108 12 <0001007cfe51026005d300100076b0852b58400c2802281002090a100100
1209b80133b30a9f0301b80133b4009f035e0eb8fff0b4101002550eb8ff
f8b40f0f02550eb8ffe4b40d0d02550eb8ffec400f0a0a02550f0e1f0e02
0eac129d8c182b10f65d2b2b2b2bfdf6ed10f6ed003f3c3f3c3130015d1b
b3010f090100183f3f3031591323001134272627262733161716151002fd
81012b2b223d277a81bc5a4dcffe5101e001e1bcb9968a5ad2fbfddaeefe
f2fe0800>IAAAAA+ArialMT AddT42Char 
1 4340 41 <000100a80000048505ba000900d3b0852b58402206051e08088f07010707
0003041e0201020008079c2002200b02021a0b0409020c0cb80140b45609
0e0b0bb80140b456090a0c0db80140400e56092001200001002010100255
00b8fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c0255000c
0b0b065500b8fffeb40c0c065500b8fff0400a0d0d0655005d0a3b5c182b
4e10f42b2b2b2b2b2b2b5d3c4dfd2b2b2b3c4e10f65d4de4003f3f3cfd3c
12392f5d3c10fd3c31301bb10508b80333b76c05050100080104b80333b2
6c010200183f2b3f12392f2b30315933112115211121152111a803ddfce5
02b0fd5005baadfe3aadfd66>IAAAAA+ArialMT AddT42Char 
1 6518 68 <0002004affe8041c043e002800370322b0852b58402c090d092a190d1a2a
290d2a2a390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a16
9b1aa90d1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619
bb28c419cf28d215dd28084416011eb8fff440110c0c065512120c0c0655
050c0c0c065535b8ffe0404f0c0c06551f171f182b2c2a343904392c4904
482c5608592b6608692b760c870cc90cf90df92b1137340e0104102f2434
17322114185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e03
0ebbfffa000b000b0140b7560e0c0f0f02550eb8ffeab4101002550eb8ff
f44014101006550e0c0d0d06550e060f0f06550e260d0db80140b4560e18
0c0cb80140b5560e0e1c0317b802aab3182c0b0bb80140400e56182c0a0a
42551895141c1c0700b8fff440110c0c06550045270a321c030b29611061
004110fff6000b000b014000560000fff8000c000c014000560000fffc00
0d000d0140400b5600060d0d025500252124b8ffecb41010025524b8ffec
400b0d0d025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b0655
24b8ffdc400b1010065524060f0f065524b8fffcb40c0c065524b8025b40
0e27400026102620263026af260539b8ffc0b40e0e025526b8ffd6b40e0e
025526bbfff4000d000d0140b356263139b8ffc0400d1e23343039c03902
a039013917b8fff4b71010065517080c0cb80140400956172518222f080d
0db80140b4562f0c0c0cb80140b4562f0e0b0bb801404011562f24bf06cf
06021f063f060206140b0bb80140b45606140d0db80140b45606080c0cb8
0140402e56060e0f0f0255060c0d0d025506180c0c0255060c0b0b025506
0c0b0b0655060e0d0d065506100c0c065506313810f62b2b2b2b2b2b2b2b
2b2b5d71ed2b2b2bf4ed2b2b105d712bf62b2b2b5dedf42b2b2b2b2b2b2b
2b3cfd2b2b2b2be5e5003fed3fe42b3fedfd2b2be41112392f2b2b2b2b2b
2b2b2b5d71ed711112391112393901111217393130005d2b2b2b2b01715d
2b2b00711bb700032b2b0c0c0e29b8032db76c0e0e1c270a0332b8032db7
6c030b1817171c14b8032fb26c1c0700183f2b322f333f2b3f11392f2b39
113311123930315925060623222635343636373637363736353427262322
0607273e02333216161716151514161723260306070e0215141633323637
3635033c64b96aafbc477348356bda67013345887f791db0186ed08988aa
5010091722bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d
1a24250a6e2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d
2f48605b4f3d7700>IAAAAA+ArialMT AddT42Char 
1 7486 69 <00020086ffe8041f05ba0010001d0212b0852b58407b01050c0f24053505
4505053f1fb01f021f1f221c331c421c701f901f063a133c163c1a4c164c
1a5d085d0d580f5d165e1a6a086c0d680f6e166e1ac01fd90cda17da19e2
13ec17ec19e31de01fff1f1920052f0f2f1430053f0f40054c0f50056605
da1df504fa100c10150e040602001b1c0607010a151c0e0b184110fff800
0d000d014000560018fff4000c000c014000560018fff2000b000b014040
22561824d00b01100b400b600b800b041f400d0d02550b0c0f0f02550b18
0d0d02550bb8fff6b40c0c02550bb8fff0b40b0b06550bb8fff4b40f0f06
550bb8ffe0b40c0c06550bb8fff4400b0d0d06550b740111020d0db80140
b45611080c0cb80140b656113300120b0bb80140b45600040d0db8014040
135600040c0c025500040d0d06550033030c0c0cb80140b45603080d0db8
014040195603250202c001019001a001b001f001041f013f014f010301b8
fffeb41010025501b8fffc401d0e0e0255010c0d0d025501100c0c025501
120b0b0255010c0b0b065501b8fff8b41010065501b8fffc40160f0f0655
01180c0c065501140d0d065501191e4737182b4e10f42b2b2b2b2b2b2b2b
2b2b5d71723c4d10fd2b2bf42b2b2b2be42b2b10fd2b2b2b2b2b2b2b2b5d
71ed2b2b2b003fed3f3fed3f11391112393130005d015d717200711bb401
0a100e15b8032fb56c0e0b04061bb8032fb46c0607020000183f3f2b393f
2b323f30315921231133113633321e021510002322270314171633323635
3426232206012da7b472b162af7140fef2bdbc6b0234559176aca57576ac
05bafdf58f4f8fca73feeffed69d0196bf558bcdcbd0c6cd>IAAAAA+ArialMT AddT42Char 
1 8110 70 <00010050ffe803ed043e001a0261b0852b58bc0017fff0000c000c0140b4
560a080c0cb80140b45609080c0cb80140b4560f080c0cb80140b4561008
0c0cb80140b45611080c0cb901400056b1020243545840340e7f0f010f0b
01400050007000030004121c0b07181c040b010e1507080e0e0255070c0d
0d0255070c0c0c025507100b0b0255072f2b2b2b2bcdd4c6003fed3fed10
c45d3210c45d3231301b4047090c011f1c4313431753135317601360179b
029b039a0da410a41a0c080d190a6a0269036a05750c700d800da60cb509
b60ab50c0c160c860ce302030e225f0f6f0f7f0f030f01b802aa40263000
40005000600070009000a000e000f00009000f0f0b000004121c0b07181c
040b1c0f010f410afff4000c000c01400056000ffff2000b000b0140400f
560f240e080d0d06550e221b000100410afff4000c000c014000560000ff
ee000b000b0140400f5600240b2b1f010100010101400e2bb80140b45601
400d0db80140b45601400c0cb80140b45601360b0bb8014040205601400b
0b065501401010065501480c0c0655011a0d0d065501491c15080d0db801
40b456150c0c0cb80140b456150e0b0bb801404021561524cf07011f073f
0702070e0b0b0655070a1010065507120c0c0655070c0d0db80140b45607
0c0c0cb80140b65607311b34c4182b10f62b2b2b2b2b5d71ed2b2b2b10f6
2b2b2b2b2b2b2b2b5d724b53234b515a58b90001ffc03859ed2b2b72f42b
ed2b2b72003fed3fed12392f11392f105de4105de43130005d71015d7159
012b2b2b2b2b2b1b400a010000120e0f0f120418b8032fb46c040b0b12b8
032fb26c0b0700183f2b3f2b11392f3311392f3330315901170606232200
1134123633321617072626232206151416333236033cb11defaedafef772
e989addc1faf197f5a88aaa4846a8e018517b7cf011d010aac010281afa1
1b6b6cc3d3d6c282>IAAAAA+ArialMT AddT42Char 
1 9434 72 <0002004bffe8041e043e0015001d0216b0852b5840171f001c150255035d
055d09550b65036b056f09650b0815b8ffe4b40d0d065511b8ffe440520d
0d06551d1c0d0d06552712d905fa14f61a0431123a19311c41124d1a411c
51125c19521c61126d1a611c78067815f602f618100016010f0d17175016
6016701603161c0f9010a010021010041b1c0a0700ba02aa0001ffc0b410
10025501b8ffc0400e101006551001010195131c040b174110fff0000c00
0c014000560017fff2000b000b014000560017fff8000d000d0140b35617
400db8ffdcb40d0d02550db8ffeeb40d0d06550db8ffeab40c0c06550db8
ffc04009272a34b00d010d1a1fb8ffc0b32526341fb8ffc0b71e2334301f
011f16bbfffc000d000d0140b656163310080c0cb80140b456100e0b0bb8
0140b45610080d0db8014040135610240740242a341f073f074f0703070c
0c0cb80140b456070c0d0db80140402b5607200b0b025507180c0c025507
1c0d0d0255070e0b0b0655071c0c0c065507160d0d065507191e3437182b
4e10f42b2b2b2b2b2b2b2b5d2b4dfd2b2b2be42b4e10712b2bf6712b2b2b
2b4ded2b2b2b003fedfd5d2b2be43fed12392f5d3cfd713c011112393912
393130015d005d2b2b2b0171721b401d0000500070008000900005300070
0080009000c000d000060000041016b8032f400d6c100010301002130310
0a0413b8032fb46c040b0a1bb8032fb26c0a0700183f2b3f2b12395f5e5d
2f2b11332f5d713031590117060623220011100033320011140721161633
32360121262726232206035eba2ceeb9e9feef0114dcd5010e01fce80ab2
85638cfdda02510c3856897ca9015617a3b4011f0103010c0128fedefef9
1020afba680195864368a600>IAAAAA+ArialMT AddT42Char 
1 10076 73 <000100130000028005d30017015eb0852b58401e1409010f192f19301940
1970199b0c9c0da90d081a0d280db019c0190419b8ffc0401f1a1f341d08
0d030c0f1c0a0115022b1413040306000a9f140114ff130e0b0bb80140b7
56134004170e0b0bb80140b45617080d0db80140b456170c0c0cb8014040
0b5617250400030292010100b8ffc0b331383400b8ffc0402b1c1f349000
0119400f0f025519400d0e025500141010025500280f0f025500220e0e02
55002c0d0d025500b8fff2400b0c0c025500140b0b065500b8ffeab41010
065500b8ffe6b40f0f065500b8fffab70c0c065500a31819bc01ba002100
f6010a00182b2bf62b2b2b2b2b2b2b2b2b2b2b5d2b2b3c10f43c103ced2b
2b2b10ed2bed5d003f3f3c3c3cfd3c3fed39113931304379401410110609
0706080602061009121b0011060f1b012b012b2a8181012b715d00721bb5
000a16130302b8032db46c03060a0fb80332b26c0a0100183f2b3f2b3332
3f303159331123353335343736363332170726232206151533152311b29f
9f131a83764c5c1b38325244cfcf039a8c716b344657129d0a4660628cfc
6600>IAAAAA+ArialMT AddT42Char 
1 10498 74 <00020042fe5103ea043e001e002a0229b0852b5840600b0b05142c0b2514
4c0b451406091d191d2c0b26142c23390b36144a0b46145607580b680bfa
0af5150e2e232c273e233e274c27902ca02c07362136293f2c460b462145
2954215429690763216329602c802cda27e821ee23ef271117160615b802
b1b4281c130701b802aa401020003000600070008000c000d0000700b802
7d4010051c1c0f0a45221c0c0a16153325330a4110fff2000b000b014000
56000afff2000c000c01400056000afff8000d000d01404024560a251818
d017011017401760178017042c400b0c02552c400d0d0255171210100255
17b8fff440110f0f025517060e0e025517160d0d025517b8ffea400b0b0b
065517121010065517b8ffeeb40c0c065517b8fffcb40d0d065517410aff
fa000c000c014000560017fffa000d000d0140400c5617740f012500221f
0e0b0bb80140b4561f080d0db80140b4561f0c0c0cb801404017561f24bf
0fcf0fdf0fff0f041f0f3f0f4f0f030f0c0c0cb80140b4560f100d0db801
40402e560f200b0b02550f1a0c0c02550f220d0d02550f1c0b0b06550f0c
0d0d06550f1a0c0c06550f192b2c74213450182b2b4ef42b2b2b2b2b2b2b
2b5d714ded2b2b2bf4ed10fd2b2b2b2b2b2b2b2b2b2b2b2b5d713c10fd2b
2b2be4f63c003fede43fedfd5de43fede43f3c3130015d71005d711b400a
00000116030000131c05b8032fb56c1c0f0a0c22b8032fb76c0c0a160615
1328b8032fb26c130700183f2b323f3f2b393f2b12392f5f5e5d30315917
171617163332363736270623220235341236333217353311140606232226
13141633323635342623220666af0b3243747d88180e0176b0dbf06ed18d
bc7aa665dba0beea99a67d7ca8ad7a78a8581a512532645a37b08b013cdd
9801018c9880fc6af8cf78ab032ad1c0bfccc3c6c300>IAAAAA+ArialMT AddT42Char 
1 11180 76 <000200880000013c05ba00030007020ab0852b58b3020a0b0bb80140b456
030a0b0bb80140b456060a0b0bb80140b456070a0b0b4119014000560001
fffc000b000b014000560000fffc000b000b014000560005fffc000b000b
014000560004fffc000b000b0140b456020b0c0cb80140b456030b0c0cb8
0140b456060b0c0cb80140b456070b0c0c4119014000560001fffd000c00
0c014000560000fffd000c000c014000560005fffd000c000c0140005600
04fffd000c000c0140b45602040d0db80140b45603040d0db80140b45606
040d0db80140b45607040d0d4119014000560001fffc000d000d01400056
0000fffc000d000d014000560005fffc000d000d014000560004fffc000d
000d014040375609360b0b02554f099009a009b009c009df09f009070009
1f09700980099f09b009c009df09e009ff090a1f09010001070402030906
03bbffc0000d000d0140402a56037e0100060506040a0607250500049f04
a004b004c004e00406c004f0040200042004d004e0040404b8fff8b41010
025504b8fffa40170e0e025504040c0c0255040a0b0b025504140b0b0655
04b8ffeab41010065504b8fffeb40d0d065504b8fffc400a0c0c0655044e
084750182b10f62b2b2b2b2b2b2b2b5d71723cfd3c003f3f3c3fed2b0111
123939111239393130015d72712b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b1bb7040a05060040010000183f1acd3f3f3031591335
33150311331188b4b4b404ebcfcffb150426fbda>IAAAAA+ArialMT AddT42Char 
1 11740 79 <000100830000013705ba00030181b0852b58b3020a0b0bb80140b456030a
0b0b410d014000560001fffc000b000b014000560000fffc000b000b0140
b456020b0c0cb80140b456030b0c0c410d014000560001fffd000c000c01
4000560000fffd000c000c0140b45602040d0db80140b45603040d0d410d
014000560001fffc000d000d014000560000fffc000d000d0140b7560536
0b0b025505b8ffc0b337383405b8ffc0b334353405b8ffc0b330313405b8
ffc0b322253405b8ffc040251517340f051f059f05df05044f05df05f005
031f0570058005ff05040100000a0203250100b8ffc0b337383400b8ffc0
40153335349f0001c000f0000200002000d000e0000400b8fff8b4101002
5500b8fffa401d0e0e025500040c0c0255000a0b0b025500140b0b065500
081010065500b8fffeb40d0d065500b8ffffb40c0c065500b8fffc400a0c
0c0655004e044750182b10f62b2b2b2b2b2b2b2b2b5d71722b2b3cfd3c00
3f3f3130015d71722b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1bb3000a
010000183f3f3031593311331183b405bafa4600>IAAAAA+ArialMT AddT42Char 
1 12150 80 <0001008700000626043e0023036fb0852b5841920013fff2000b000b0140
00560010fff2000b000b014000560012fff2000b000b014000560011fff2
000b000b01400056001dfffc000d000d01400056001cfffc000d000d0140
0056001bfffc000d000d01400056001afffc000d000d01400056001dfffc
000c000c01400056001cfffc000c000c01400056001bfffc000c000c0140
0056001afffc000c000c01400056000cfffe000c000c01400056000dfffe
000c000c01400056000efffe000c000c01400056000ffffe000c000c0140
00560013fff2000c000c014000560010fff2000c000c014000560012fff2
000c000c014000560011fff2000c000c014000560013fff8000d000d0140
00560010fff8000d000d014000560012fff8000d000d014000560011fff8
000d000d01400056000dfff4b40d0d065508b8fff4b40d0d065509b8ffd8
404d0b0d342504e404e409e117e52005d505f620021708202309181b2009
0303231e1c06151c0b0b06070106231a19100ad025019025a02502251717
1a0e2590110111041010025511180f0f025511b8ffec400b0e0e02551114
0c0c025511b8ffe840170b0b025511020b0b0655110c1010065511060f0f
065511b8fffab40c0c065511b8fff8b40d0d065511b8015db318080c0cb8
0140b456180e0b0bb80140b45618040d0db80140400d561825901b011b18
0f0f02551bb8ffec400b0e0e02551b140c0c02551bb8ffee40110b0b0255
1b040b0b06551b0a101006551bb8fffe400b0d0d06551b0c0f0f06551bb8
fffcb40c0c06551bb8015db6000233230e0b0bb80140b45623080d0db801
40b456230c0c0cb80140401456232501d000019000a000021f003f004f00
0300b8fffe401d0e0e025500100d0d025500100c0c0255000c0b0b025500
160b0b065500b8fffcb41010065500b8fff440140f0f0655000a0c0c0655
000e0d0d065500192425b80178b3214750182b2b4ef42b2b2b2b2b2b2b2b
2b5d71723c4dfd2b2b2be410f42b2b2b2b2b2b2b2b2b5ded2b2b2bf42b2b
2b2b2b2b2b2b2b2b5dfd4e456544e67172003f3c3c3c3f3f3c4d10ed10ed
11173901111239123931304379400e0c141326140c111b01120d151b0100
2b012b2b81015d005d2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b1b400a100a1a0a000a01060b15b80330b66c0b07090306
1eb80330b26c060700183f2b32323f2b3f3f3f3f30315933113315363633
321617363332161511231134262623220615112311342623220606151187
a132a66a76971f7eca9eaab3235c3e7094b458644c813a0426954e5f6258
baafb6fd27029d6c5f3a95a4fd9702b27878509a91fdd900>IAAAAA+ArialMT AddT42Char 
1 13134 81 <00010087000003e6043e001601e6b0852b5840130503061302a810b810e3
03e713f003f6130604b8fff040220b0d347910019810d018e018ff180420
08140e1416121c05070106160d0a0d0e0c0e4110fff8000d000d01400056
000efff2000b000b01400056000efff4000c000c0140401c560e24184010
10025518400b0b02550b28101002550b140e0e02550bb8ffec40110d0d02
550b040c0c02550b220b0b02550bb8fff4400b0b0b06550b14101006550b
b8fff9400b0d0d06550b0a0f0f06550bb8fff640120c0c06550b40333634
ff0b01ff0b010b4e18b8ffc0401a343634b018f018027018a018b018c018
04180302331516080d0db80140b456160e0b0bb80140b456160c0c0cb801
40b45616250100b8fff6b41111025500b8fffab41010025500b8fffa4017
0e0e025500040c0c0255000a0b0b025500040b0b065500b8fffa40110f0f
065500020c0c065500040d0d065500b8ffc04012333634f0000100002000
d000e00004004e1710f65d712b2b2b2b2b2b2b2b2b2b3cfd2b2b2b3cf43c
105d712bf65d712b2b2b2b2b2b2b2b2b2b2b2b2bed2b2b2b3c103c003f3c
3f3fed11390112393130437940160611090a080a070a0306102611060e1b
010f0a121b01002b012b2b2a81015d71002b5d711b40090d0a160a010603
0512b80330b26c050700183f2b323f3f3f30315933113315363332161617
1615112311342626232206151187a275dd60a150100ab42a6b4873a70426
97af45704d327dfd7302866e6d4192ccfdbc>IAAAAA+ArialMT AddT42Char 
1 13692 82 <00020044ffe80427043e000d001901ffb0852b58b615180d0d065513b8ff
e8b40d0d06550fb8ffe840650d0d065519180d0d065512070a190c470648
0856065908670669080834103a123a16351845104b124b1645185c055c09
52105d125d1652186d056d0964106d126d1664187701150906050d5b0354
05540a5b0c6c036505650a6c0c0a171c0407111c0b0b144110fff2000b00
0b014000560014fff4000c000c014000560014fff8000d000d0140401056
14241b400d0d02551b400b0b025507b8ffea40110f0f025507180d0d0255
07100b0b025507b8fff0b40b0b065507b8fff0b40d0d065507b8fff0b40f
0f065507b8fff0b40c0c065507b8ffc0400e242534300701000710072007
0307bbfff4000d000d0140b6560731df1b011bb8ffc0400b1e2334301b01
1b0e080d0db80140b4560e0c0c0cb80140b4560e0e0b0bb801404041560e
24000c0e0f025500120d0d0255000c0c0c0255001c0b0b0255000e0b0b06
55000e0d0d0655000c1010065500160c0c065500402425341f003f000200
0c0d0db80140b456000c0c0cb80140b456000c0b0bb80140b65600311a34
37182b10f62b2b2b5d2b2b2b2b2b2b2b2b2bed2b2b2b10712b5df62b5d5d
2b2b2b2b2b2b2b2b2b2bed2b2b2b003fed3fed313001715d0071435c5840
09530553096205620904015d59002b2b2b2b1bb10b11b8032fb46c0b0b04
17b8032fb26c040700183f2b3f2b30315913103736333200151406062322
0013141633323635342623220644a489c5db01167beb8bdffeedb9b28786
b2b38587b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca>IAAAAA+ArialMT AddT42Char 
2 0 84 <00020048fe6903e0043e0010001c01beb0852b58406c0b022b022a183b02
4b02790c063f153f194b19901ea01e053413341b3f1e4413441b5313531b
6313631b601e801ed406d512e606e90cea18102902220c2b153902350c49
02460c5a026902d90cdb18e316e919e61bfc020f01040d141a1c0b070e06
141c040b000e170e33004110fff2000b000b014000560000fff4000c000c
014000560000fff8000d000d014040245600251010d00f01100f400f600f
800f041e400b0c02551e400d0d02550f12101002550fb8fff440110f0f02
550f060e0e02550f160d0d02550fb8fffe400b0c0c02550f16101006550f
b8ffe8b40c0c06550fb8fff4400a0d0d06550f7411080d0db80140b45611
0c0c0cb80140b456110e0b0bb801404017561124bf07cf07df07ff07041f
073f074f0703070c0d0db80140b456070c0c0cb8014040285607240b0b02
55071a0c0c025507220d0d025507160c0c0655071a0d0d065507191d1e74
213450182b2b4ef42b2b2b2b2b2b2b5d714ded2b2b2bfd2b2b2b2b2b2b2b
2b2b2b5d713c10fd2b2b2bf43c003f3fed3f3fed113912393130005d015d
7100711bb4000e010414b8032fb76c040b0e060d0b1ab8032db26c0b0700
183f2b323f3f2b393f303159011106062322001134363633321735331101
1416333236353426232206032c2a9755bdfeef6fd37ec571a2fd21ac7873
a6af7675a3fe6902083b4e012e0107a0fe83a68efa4303adcdcdc3c7d4d6
c700>IAAAAA+ArialMT AddT42Char 
2 542 85 <00010085000002c6043e00110107b0852b58403b2f130110040123043404
4304530466047404060911080908090d1311090d000308010b1c06070106
000a09289008010822201301130222110e0b0bb80140b45611080d0db801
40b456110c0c0cb80140b45611250100b8ffc04010333634f00001000020
00d000e0000400b8fff8b41010025500b8fff840110e0e025500040c0c02
5500060b0b025500b8fffcb41010065500b8fff440160f0f065500060c0c
065500080d0d0655004e1247c4182b10f62b2b2b2b2b2b2b2b5d712b3cfd
2b2b2be4105df472e4003f3f3fed11393911393901111239390010c9870e
7dc43130005d72015d1bb7000a01060903060bb80336b26c060700183f2b
32323f3f30315933113315363633321707262322060706151185a23e693f
5b5e3e42423b5e141e0426a171483aa727473f6072fdd400>IAAAAA+ArialMT AddT42Char 
2 866 86 <0001003fffe803b1043e0030041eb0852b58b3170e0b0bb80140b456180e
0b0bb80140b456190e0b0b4137014000560028fff4000c000c0140005600
27fff4000c000c014000560026fff4000c000c014000560025fff4000c00
0c014000560024fff4000c000c014000560023fff4000c000c0140005600
22fff4000c000c014000560021fff4000c000c014000560020fff4000c00
0c0140407c56042214223a094a094424562265227c098e098424a613ab2c
c2030d09171a1817304b2cd617051b025502021032010a185c085c095c0a
5c0b5c0c5c0d6a086a096a0a6a0b6a0c6a0db426b4270f27262427242936
245a0a590b64266428742374248024930a9c0c9228972c9530a40aa90ca3
27a428b326c5261628b8fff4b40d0d065522b8fff4b40d0d065523b8fff4
b40d0d065524b8fff4b40d0d065528b8fff4b40c0c065522b8fff4b40c0c
065523b8fff4b40c0c065524b8fff4b40c0c06551db8ffde40121e395a08
27250c0a041a202615040b2e1d1ab802aa4022192c0b0b02551f193f194f
195f19af19cf19060f191f196f19df19041f198f190219bd025500150000
02aa0001ffc040140b0b025510014001021001d00102000110010201b8ff
c0b314163401b8ffc040100e113401012e5c1d6c1d021d1c150704b8fff4
b40b0b025504b8ffe6b41010065504b8ffe640130f0f0655041c2e0b1f1a
011a24194013183432b8ffc040320f0f025519180f0f025519180d0d0255
19160c0c025519201010065519200f0f065519100c0c065519160d0d0655
19160c0c4109014000560019025b0007fff2000b000b0140b35607242ab8
ffc0b51c39d02a012ab8ffe6b40c0c02552ab8ffe8b40f0f02552ab8ffe8
b40c0c06552ab8ffeab40d0d06552abbfff4000c000c0140b3562a1a32b8
ffc04021272a346032c032023f3280320232100101012400180d0d025500
100d0d06550020b8fff4b40d0d025520b8fff4b41010065520b8fff4b70f
0f0655200e0b0bb8014040165620240f100b0b02550f160c0c02550f200d
0d02550fb8fffa40140f0f02550f0e0c0c06550f0c0d0d06550f060c0cb8
01404011560f22df00013f004f00020019313437182b4e10f45d714df42b
2b2b2b2b2b2bed2b2b2b2b102b2bed724e105d712bf62b2b2b2b2b712b4d
ed2bf42b2b2b2b2b2b2b2b2b2bed72003fed2b2b2b3fed7112392f2b2b5d
71722be410fd5d71722be41112391112390111121739313043794040272d
1e2305142c261110121013100306220d201b000928071b01052d071b011e
14201b00210e231b0022230d0c08290a1b012827090a062b041b001f101d
1b01002b2b103c103c2b103c103c2b012b2b2b2b2a2b818181002b2b2b2b
2b2b2b2b2b5d71015d72715d002b2b2b2b2b2b2b2b2b012b2b2b1b400a00
01011d0b26261d2e04b8032fb76c2e0b191a1a151db8032fb26c15070018
3f2b322f333f2b1139113311392f33303159133716163332363534272627
2e023534363736363332161617072626232206151417161716171e021514
06062322263fb20f897b7c78352593c6994f41382a91537dbd5a11b00c73
697c6a16162f1b84bf975669c67dcfd9013d1c6b7265443d231825324981
4e4779281f2b487b6718525c5237231c1d130a2433417c5c5a9f57ac>IAAAAA+ArialMT AddT42Char 
2 2064 87 <00010024fff2022a05990017016eb0852b584120000cfffe000c000c0140
0056000bfffe000c000c014000560008fffe000c000c014000560007fffe
000c000c014000560006fffe000c000c01400056000affc0b323263409b8
ffc0402423263480190100010c0d0a0103001610092b0f0a06161c030b0f
10220022010d12080d0db80140b456120e0b0bb80140b456120a0c0cb801
4040225612250c01ff070845094560077007800790070400072007a007b0
07c007d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e
0e025507b8fff8b40d0d025507b8fff8b40c0c025507b8fffab410100655
07b8fff0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00
180136b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd2b2b2b3c
10e4f43c003fed3f3cfd3c1139123911333310c93130015d2b2b2b2b2b2b
2b1bb10316b80332b46c030b0100b8033240096c010a0d0d110e0a09b803
2db26c0a0600183f2b3332322f3f2b3f2b30315925170623222626351123
353311371133152311141616333202101a4c3c626c2c8484b3b5b5132b28
1ea19f103e65a202638c01076cfe8d8cfd934d2c1a00>IAAAAA+ArialMT AddT42Char 
2 2506 88 <00010083ffe803e00426001801b7b0852b58b9001affc040091517340220
1316340fb8fff040191214342b1301240813160c0113160b06000a111c03
0b0033164110fff8000d000d014000560016fff2000b000b014000560016
fff4000c000c0140401c5616251817403336341a40101002551728101002
5517120e0e025517b8ffec400b0d0d025517040c0c025517b8fff4400b0b
0b065517141010065517b8fff8400b0d0d0655170c0f0f065517b8fff640
0d0c0c0655ff1701c01701174e1ab8ffc04016343634b01af01a02701aa0
1ab01aff1a041a0c080d0db80140b4560c0e0b0bb80140b4560c0c0c0cb8
0140b3560c2509b8ffc04010333634f0090100092009d009e0090409b8ff
f8b41010025509b8fff840110e0e025509040c0c0255090a0b0b065509b8
fff640160f0f065509020c0c065509020d0d0655094e194750182b10f62b
2b2b2b2b2b2b5d712bed2b2b2b105d712bf65d712b2b2b2b2b2b2b2b2b2b
2b3cfd2b2b2be4003fed3f3f3c39390111123931304379401a04100e0d0f
0d0206070806080508030610040c1b000d08111b00002b012b2a2a81005d
012b2b2b1bb4000a010311b80330b66c030b16060a0600183f3f3f2b323f
30315921350623222626272635113311141716163332363635113311033f
7cd55ea34f100bb40b116e51518e3bb49cb4486d4f35730292fdb38d3147
51538f880239fbda>IAAAAA+ArialMT AddT42Char 
2 5280 92 <00010021fe5103ee0426001a02c5b0852b58b30f180d0db80140b456140c
0d0db80140b456150c0d0db80140b456160c0d0db80140b4560f040d0dbe
014000560012fff4000d000d0140b4560e0c0d0db80140b4560d0c0d0db8
0140b4560c0c0d0db80140b4560f0c0c0cb80140b4560e0c0c0cb80140b4
560d0c0c0cb80140b4560c0c0c0cbe014000560012fff2000b000b0140b4
560c0e0b0bb901400056b10202435458401d0a140f030b031c190f12060b
061340120f200b400c200f180f0f02550f192f2b1add1a18cd1a1910dd1a
18cd003f3f3fed12173931301bb30f1c010fb8ffde40731c392814560faf
0a03400d400f020f202830341020283034070c0912160d1812270b270c27
0d360c360d350e99110b2812281348165912591359156912691369157906
760d79117a147a15850d8a118c128c138914980aa80bbc10bb11ba14ea0a
e714f50dfd10f914ff1c1e1213180e0e4255b106024354584016130b1c1b
040f440f840f030f190b031c190f12060b06003f3f3fed1112395d011112
39391b40370f0f0c101112120a00031914131325120a1412120a0f0c0f11
0c250b0a140b0b0a1312120c0c0b06031c190f001c101c022f1cbf1c021c
b8023fb50f1340124014b80254400b3f124012025f12bf120212b80142b6
0f012200451b0ab8025440120f200b4040200c300c4f0c03500cff0c020c
b80142b32f0f010fb8023fb41b207c66182b1a1910fd71f45d711a18ed1a
1910ed1810f4e41910e45d71ed1a1810ed1910e45d7100183fed3f3c103c
103c87052e2b087d10c487052e182b0e7d10c400111239870e103c3c08c4
4bb00e534bb018515ab00243b040505a58bb000cffe8000bffe801383859
592b313001435c58b90014ffdeb637390a2237390eb8ffe8b51539112215
392b2b2b2b595d712b2b00715d2b015d592b2b2b2b2b2b2b2b2b2b2b2b2b
2b002b1bb11903b80333400a6c190f0f0a0a12060b0600183f3f3f333f2b
303159132716333236373637363701331316173637133301060706062322
7f143b2c3c48171126050bfe6dc2dd2b221f2be3b4fe6c4124307c5634fe
67a91028241b6b0f1d0428fd9975817c76026bfbc8af42595300>IAAAAA+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070042b40201e40607b802994013000504
e403000a0704e4010019080605e40203bc023100090199012e00182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>IAAAAA+ArialMT AddT42Char 
IAAAAA+ArialMT /CharStrings get begin
/g3 3 def
/g12 12 def
/g41 41 def
/g68 68 def
/g69 69 def
/g70 70 def
/g72 72 def
/g73 73 def
/g74 74 def
/g76 76 def
/g79 79 def
/g80 80 def
/g81 81 def
/g82 82 def
/g84 84 def
/g85 85 def
/g86 86 def
/g87 87 def
/g88 88 def
/g92 92 def
end
IAAAAA+ArialMT /Encoding get
dup 32 /g3 put
dup 41 /g12 put
dup 70 /g41 put
dup 97 /g68 put
dup 98 /g69 put
dup 99 /g70 put
dup 101 /g72 put
dup 102 /g73 put
dup 103 /g74 put
dup 105 /g76 put
dup 108 /g79 put
dup 109 /g80 put
dup 110 /g81 put
dup 111 /g82 put
dup 113 /g84 put
dup 114 /g85 put
dup 115 /g86 put
dup 116 /g87 put
dup 117 /g88 put
dup 121 /g92 put
pop
end
%ADOEndSubsetFont
/AMLJBM+ArialMT /IAAAAA+ArialMT findfont ct_VMDictPut
/AMLJBM+ArialMT*1 
[32{/.notdef}rp /g3 8{/.notdef}rp /g12 28{/.notdef}rp /g41 26{/.notdef}rp /g68 
/g69 /g70 /.notdef /g72 /g73 /g74 /.notdef /g76 
2{/.notdef}rp /g79 /g80 /g81 /g82 /.notdef /g84 /g85 
/g86 /g87 /g88 3{/.notdef}rp /g92 134{/.notdef}rp]
AMLJBM+ArialMT nf
AMLJBM+ArialMT*1 [9.9 0 0 -9.9 0 0 ]msf
6.27954 11.5213 mo
(a\) Frequency of stressful microblogs)
[5.50289 3.29663 2.75386 6.05033 3.29663 5.50288 5.50289 5.50288 5.50288 5.50288 4.95 4.95 
2.75386 5.50288 2.75386 2.75386 4.95 2.75387 3.29662 5.50289 4.95 4.95 2.75387 5.50287 
2.196 2.75386 8.24663 2.19598 4.95 3.29663 5.50288 5.5029 2.19598 5.50287 5.5029 0 
]xsh
gsave
37.4045 98.8773 mo
134.905 98.8773 li
134.905 15.6273 li
37.4045 15.6273 li
cp
clp
37.3445 98.9373 mo
134.965 98.9373 li
134.965 15.6173 li
37.3445 15.6173 li
cp
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 17.3455 255.927 ]ct
[97.62 0 0 83.32 19.9991 156.99 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 119 
/H 85 
/M[119 0 0 -85 0 85 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
n:L.+n7;$Pn.tLNnA"d9phfLcn5/V'n.G.=n?)4t!,_3kn5Ab(n.G.=n>l$lq>g6in,`#/hZ30.n:L4-
s%r2qn<<>Wn29^Mn87Y[qbZu_n:'j=n1!k/n87Y\o2>Qcn9sd<n1!k-n.Y9kn,`G;odeo"nE04ln5/Ub
oTT6;n.tLNnA"I0n3HJ>n:(<JoF^RAn?)1sn3QPAn9ssAr"8EIn>l$ln,VqYn13l+o)S:Bn:L.+n7;$P
n.t^Tq_dlXn87Y[n5/V'n.G.=s/kjon87Y\n5Ab(n.G.=pT+.kn.Y9kn,`#/hZ30.!.s`mn5/Ubn<<>W
n29^MphfhDn3HJ>n:'j=n1!k/n87Y\n5Ab(n.G.=n>l$lq#L0in,`#/hZ30.n:L1,!)W/qn<<>Wn29^M
n87Y[qG?o_n:'j=n1!k/n87Y\nl#Kcn9sd<n1!k-n.Y9kn,`D:p+,##nE04ln5/Ubo990;n.tLNnA"I0
n3HJ>n:(9Iob$[Bn?)1sn3QPAn9sp@r=SNJn>l$ln,VqYn13i*oDnCCn:L.+n7;$Pn.t[Sr&*uYn87Y[
n5/V'n.G.=riPdon87Y\n5Ab(n.G.=p8e(kn.Y9kn,`#/hZ30.s+9fnn5/Ubn<<>Wn29^MpMKbDn3HJ>
n:'j=n1!k/n87Y\n5Ab(n.G.=n>l?up_3,sn,`#/hZ30.nU^amn5/Ubn<<>Wn29^Mn88"epH\4En:'j=
n1!k/n87_^s$?-Pn9sd<n1!k-n.Y9kqZ6Bkn13ArnE04ln5/^erabM^n.tLNnA"I0n3HJ>r-n<fn.G.=
n?)1sn3QPAoR6[dn.G.=n>l$ln,VqYn14G;irJT2n:L.+n7;$PobRH@n29^Mn87Y[n5/V'n.GXKo-s12
n87Y\n5Ab(n.G@Cq^M$8n.Y9kn,`#/hZ3]=o&fFnn5/Ubn<<>Wn29sTqS2N:n3HJ>n:'j=n1!k/!,_7C
n3QPAn9sd<n1!k-p_3H:n,VqYn13ArnE04ln5/Ubn<<>Wn29^Mn87tdpd"=Fn:'j=n1!k/n87\]!($*P
n9sd<n1!k-n.Y9kq>p<kn13ArnE04ln5/[ds((V_n.tLNnA"I0n3HJ>qgS6fn.G.=n?)1sn3QPAo6pUd
n.G.=n>l$ln,VqYn14D:j8e]3n:L.+n7;$PoG7B@n29^Mn87Y[n5/V'n.GUJoI9:3n87Y\n5Ab(n.G=B
r$h-9n.Y9kn,`#/hZ3Z<oB,Oon5/Ubn<<>Wn29pSqnMW;n3HJ>n:'j=n1!k/s)%=Dn3QPAn9sd<n1!k-
pCmB:n,VqYn13ArnE04fha6gon8Rl2n@8:-ph8PAn9XS/n5SnUnRqo9h_jnLn6GH`n>,O^q>fXXn0RQ-
n,`$ln9jdnmR$E)n8Rl2n@7t$l882kn9XS/n5SnUn7^f=r\a1kn6GH`n>,O^hZ3R#od0)2n,`$ln9j+[
oT9$5n8Rl2n@7t$h_ahKrESu"n5SnUn7^]:n9Xb4r*8_ln>,O^hZ3-ln-/dlo)\?on9j+[n<!-Yp1aD<
n@7t$h_ahKn6GH^s/>Len7^]:n9XS/n5f:ZqP<ThhZ3-ln-/:^n@\gLnU04\n<!-Yn7hC%ph9J:h_ahK
n6GH^n>Phih_jnLn6GH`n>,O^q#KRXn0RQ-n,`$ln9jammm?N*n8Rl2n@7t$kqr,kn9XS/n5SnUn7^c<
s#':ln6GH`n>,O^hZ3O"p*K23n,`$ln9j+[o8rs5n8Rl2n@7t$h_ahKr*8o"n5SnUn7^]:n9X_3rEShm
n>,O^hZ3-ln-/akoE"Hpn9j+[n<!-YokF><n@7t$h_ahKn6GH^ri#Fen7^]:n9XS/n5f7YqkW]ihZ3-l
n-/:^n@ejLnpK=]n<!-Yn7hC%pLsD:h_ahKn6GH^n>Phih_jnLn6GH`n>,jgp^H$[n0RQ-n,`$lnU(=a
ha6gon8Rl2n@7t$qD@=kn9XS/n5SnUn7_AMmPXK[n6GH`n>,O^l2^MXn0RQ-n,`$ln9j4^r^-+9n8Rl2
n@7t$h_b7Wom6+4n5SnUn7^]:oQpI^n6GH`n>,O^hZ3-lr<;fsn,`$ln9j+[n<!<^r,D.>n@7t$h_ahK
n6Grlo2P4Xn7^]:n9XS/p/_&kn>,O^hZ3-ln-/:^s1S!:n9j+[n<!-Yn7hX,qRH$.h_ahKn6GH^n>H>#
nS$f;n9XS/n5f%Sp^Hs,hZ3-ln-/:^n@e==ha6gon8Rl2n@7t$q)%7kn9XS/n5SnUn7_>LmksT\n6GH`
n>,O^klCGXn0RQ-n,`$ln9j1]s$H4:n8Rl2n@7t$h_b4Vp3Q45n5SnUn7^]:o6UC^n6GH`n>,O^hZ3-l
quu`sn,`$ln9j+[n<!9]rG_7?n@7t$h_ahKn6GokoMk=Yn7^]:n9XS/oiCukn>,O^hZ3-ln-/:^rk7p:
n9j+[n<!-Yn7hU+qmc-/h_ahKn6GH^n>QA#nn?o<n9XS/n5f%SpC-m,hZ3-ln-/:^n@e;kn/Cd;n.tL<
n.G/#q#L0in.b@.n.G./n."k`nGiOhn.b@.n.G./n."kbklA$in,`"Ynf%NHn/h'7n0@E7n7;"gn.ba9
p)!31n/Lj+n5/TSn.bI1rYP&9n/Lj+n5@@.dfAk<n,Vqrn/h3;r>+lIn.G/#n,Vqln/(R+r>YAJn."k`
n,Vqln/(R+oc*fJn."kbW;uMin,`"Yn/Cd;n.tL<p(@06n7;"gn.b@.n.G./n.#ConkefUn.b@.n.G./
n.#+iqGNd_n,WLhnGr%sn/h'7n0@E7n7;:oq#Kmun/(R+n/Lj+n5/TSn.b@.n.G./n."kbkQ%sin,`"Y
nJVBGn/h'7n0@E7n7;"gn.b^8pD<<2n/Lj+n5/TSn.bF0rtk/:n/Lj+n5@=-e,\t=n,Vqrn/h0:rYFuJ
n.G/#n,Vqln/(R+r#>;Jn."k`n,Vqln/(R+oGd`Jn."kbVuZGin,`"Yn/Cd;n.tL<ob%*6n7;"gn.b@.
n.G./n.#@no2+oVn.b@.n.G./n.#(hqbim`n,`Ohnc8.tn/h'7n0@E7n7;7nq>g"!n/(R+n/Lj+n5/TS
n.b@.n.G./n."kbq#I/in,`%Z!!)L,n/h'7n0@E7n7;"gq@rZ<n/(R+n/Lj+n5/TSneD*<n/(R+n/Lj+
n5@p>_Z90,n,Vqro,dlPn.tL<n.G/#n,Vqln/)!7ob$[4n."k`n,Vqln/(^/r=SN<n."kb\H(Xin,`"Y
n/Cd;n.t[Ar$1\Cn7;"gn.b@.n.G./rXJH.n5/TSn.b@.n.G./p'pm.n5>_UrrMZkn,Vqrn/h'7n0@E7
pLO,2n,Vqln/(R+n/Lj+n5')bnGr%mn/(R+n/Lj+n5B#]U]Blbn,Vqrn/h'7n0@E7n7;"gq%WT<n/(R+
n/Lj+n5/TSnIts;n/(R+n/Lj+n5@m=_uT9-n,VqrnfIfPn.tL<n.G/#n,Vqln/(s6p(?d5n."k`n,Vql
n/([.rXnW=n."kb\,bRin,`"Yn/Cd;n.tX@r?LeDn7;"gn.b@.n.G./r=/B.n5/TSn.b@.n.G./oaUg.
n5>_UrW2Tkn,Vqrn/h'7n0@E7p14&2n,Vqln/(R+n/Lj+n50,bnc8.nn/(R+n/Lj+n5Au\V#]ucn:0pe
n6b[Nn6b[$n@\R3phK:Ln4`>&n4`=Rn>l(o!,D!Sn4rJ'n4rIUn>Pgeq>g6in,`#4n,`"\nCI)Yni6Y/
n6b[Nn6b[$n@\7*n1=H1p.Xt,n4`=Rn>l%nn1=0+r_Ds5n4rIUn>Pgen,VqYr%Rdtn,`"\nCI)Yn2ToE
oToHAn6b[$n@\7*n1='&n:CO3oM"aVn>l%nn1='(n::1,r(c`an>Pgen,VqYn1a>4rWD`onCI)Yn2ToE
n<WQNp2'VBn@\7*n1='&n:C(&n6#^knuM7pn1='(n::"'n6,LaqP`lon,VqYn1a>4n,r12!.XNgn2ToE
n<WQNn8.U,phKV>n1='&n:C(&n6#1\n7qGDn4rJ'n4rIUn>Pgeq#L0in,`#4n,`"\nCI)YnMgM.n6b[N
n6b[$n@\7*n1=E0pIt(-n4`=Rn>l%nn1=-*s%`'6n4rIUn>Pgen,VqYq_7^tn,`"\nCI)Yn2ToEo9TBA
n6b[$n@\7*n1='&n:CL2oh=jWn>l%nn1='(n::.+rD)ibn>Pgen,VqYn1a>4r<)ZonCI)Yn2ToEn<WQN
okaPBn@\7*n1='&n:C(&n6#[jo;h@qn1='(n::"'n6,I`ql&upn,VqYn1a>4n,r12s*sThn2ToEn<WQN
n8.U,pM0P>n1='&n:C(&n6#1\n7qGDn4rJ'n4rIUn>Q-np^cion,`#4n,`"\nCI,Z!.XJtn6b[Nn6b[$
n@\7*qCM@ln4`>&n4`=Rn>l%nngseln4rJ'n4rIUn>Pgen,W=dp&XY:n,`"\nCI)Yn2U#Hra5/\n6b[$
n@\7*n1='&r.4Nln4`=Rn>l%nn1='(oRQmjn4rIUn>Pgen,VqYn1aeAoE"F`nCI)Yn2ToEn<W`Sr*Sr0
n@\7*n1='&n:C(&r`Jbon>l%nn1='(n::"'p0%8qn>Pgen,VqYn1a>4n,r^Ao%*;[n2ToEn<WQNn8.j3
qRl<4n1='&n:C(&n6#1\!,D%=n1='(n::"'n6,7Zp^d02n,VqYn1a>4n,r12n:0pen6b[Nn6b[$n@\7*
q(2:ln4`>&n4`=Rn>l%nnLOYkn4rJ'n4rIUn>Pgen,W:cpAsb;n,`"\nCI)Yn2TuGs'P8]n6b[$n@\7*
n1='&qgnHln4`=Rn>l%nn1='(o76gjn4rIUn>Pgen,VqYn1ab@o`=OanCI)Yn2ToEn<W]RrEo&1n@\7*
n1='&n:C(&rE/\on>l%nn1='(n::"'oi_2qn>Pgen,VqYn1a>4n,r[@o@ED\n2ToEn<WQNn8.g2qn2E5
n1='&n:C(&n6#1\s(_+>n1='(n::"'n6,7ZpCI*2n,VqYn1a>4n,r12h\#>rn6,6Wn8Rl-q$lKrn.b@^
n3HJJn5/Wamg\b#n4E+8n6GH\klAX%n-/:^i=Z)%n/Ce!n5/Unn7:Dcq\8`<n42t5n6GHZh[T/krY4in
n3QPKn5@@.j8eZQn,_DYn/Cq%rE8Vdn8Rl-h[T&hn43FBoK_nNn5/!On.b@`og/LAn6GH\X8r5'o*+Ua
h\#>rn6,6Wp2KnJn7:Dcn.b@^n3HJJs%r8_h[T&hn4E+8n6G]cqGOBpn-/:^!"n-$n/Ce!n5/Unn7;;'
kRI"qn42t5n6GHZn."jrn.b@`n3QPKn5AHM`;oB2n,_GZ!"n]=n6,6Wn8Rl-h[TDrpD!*en3HJJn5/!O
neD*<n4E+8n6GH\a8k<%n-/:^h\#>ro3)&qn5/Unn7:Dcn.b@^r'9p?n6GHZh[T&hn4E7<rB]pXn5?=f
r<;fsn,_DYn/Ce!n5/dsr,D.9h[T&hn42t5n6Grho2+<Rn.b@`n3QPKp/:ccX8q_nn,`P$i=YPtn6,6W
n8Rl-pC6?rn.b@^n3HJJn5/!On.b@`n3QPKn5B&^ZiKS!n,`%kmh,%-n6,6Wn8Rl-kmd@rn.b@^n3HJJ
n5/'QrseH3n4E+8n6GH\f`9M%n-/:^h\#GurYk9/n5/Unn7:Dcn.bdjogeL:n6GHZh[T&hoL]!Qn3QPK
n5?dsoDn@an,_DYn/Ce!ohbQ_n8Rl-h[T&hn42t5r`o&"n5/!On.b@`n3QbQqcrVgX8q_nrrMZkh\#>r
n6,6Wn8S,4qIJImn.b@^n3HJJn5')oi!o/in4E+8n6GH\p].]%n-/:^n.G.%n/Ce!n5/Unn7:_lp^Q^,
n42t5n6GHZi!fYqn.b@`n3QPKn5@m=eH#(Bn,_DYnf%NHn6,6Wn8Rl-h[T&hqa^?Mn3HJJn5/!On.bIc
r^lTFn6GH\\,c1%n-/:^h\#>rn6,B[rD<!&n7:Dcn.b@^n3HqWoN^l^h[T&hn4E+8oj%E"n5?=fn-/dl
o)[_\n/Ce!n5/Unp14&2h[T&hn42t5n6GHZrsdorn.b@`n3QPKn5Au\[K,e#n,\%~>

%%EndBinary
grestore
np
grestore
.50025 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
37.4045 98.8773 mo
134.905 98.8773 li
.746853 .66949 .627771 .212955 cmyk
@
37.4045 15.6273 mo
134.905 15.6273 li
@
44.369 98.8773 mo
44.369 97.9023 li
@
58.2971 98.8773 mo
58.2971 97.9023 li
@
72.2264 98.8773 mo
72.2264 97.9023 li
@
86.1545 98.8773 mo
86.1545 97.9023 li
@
100.083 98.8773 mo
100.083 97.9023 li
@
114.012 98.8773 mo
114.012 97.9023 li
@
127.941 98.8773 mo
127.941 97.9023 li
@
44.369 15.6273 mo
44.369 16.6023 li
@
58.2971 15.6273 mo
58.2971 16.6023 li
@
72.2264 15.6273 mo
72.2264 16.6023 li
@
86.1545 15.6273 mo
86.1545 16.6023 li
@
100.083 15.6273 mo
100.083 16.6023 li
@
114.012 15.6273 mo
114.012 16.6023 li
@
127.941 15.6273 mo
127.941 16.6023 li
@
%ADOBeginSubsetFont: IAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AMLJBM+ArialMT gcheck setglobal} if
1 904 20 <000100df000002fb05c0000a010eb0852b58b30a0c0c0cb80140b456000c
0c0cb80140b4560a0e0b0bb80140b456000e0b0bb80140b4560a080d0db8
0140b45600080d0db8014040215603400d11346b047f028f02990804ac04
010900060502030905010c0201ca0a00b8ffc0400a212334300001200001
00b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d0d02
5500b8fff040190f0f065500100c0c065500100d0d0655001a0c05400d0f
3405b8ffc0400e212334300501200540050205190bba013c018500182b4e
10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f1739011139
3130015d005d2b012b2b2b2b2b2b1b400c0201090640050509010c090500
183f3f12392f1acd111239303159212311060607353636373302fbb441d3
5497e22f74047b3e7c1fae47ca5f>AMLJBM+ArialMT AddT42Char 
1 1218 21 <0001003c0000040705c0001e0227b0852b58b10602435458400911100d18
131306550db8fff4b4111106550db8ffee4009101006550d1e14051eb8ff
e84017131306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb40
0c020a1717201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b
2b3fed2b2b2bc43231301bb10202435458400911100d0c121202550db8ff
f440090f1102550d1e14051eb8ffe0400b121302551e140f1102551eb802
bbb2020a17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f101102
02201f1112392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b
40473b053b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a
138912bc12e51ae51bf01a0cbf0bb713021e0a10080606ca1c1a141c1c1a
081c1a030102081a1c030d1e10b802a4b34f110111b80118b50d1e140500
1eb802bbb301020c0a4110fff4000c000c01400056000afff2000b000b01
400056000afff8000d000d0140400d560a7317d30000014021233401bb02
81002000100138400c11b53f025f026f027f020402ba0224001f018fb18b
182b10f65df4ed10f62b3c10f4ed2b2b2b003f3cfd3c3fedfd5de4111217
390111121739870e2e2b0e7d10c4011112393130b00243b040505840091b
101c101d101e1006befff00007ffe00008fff00009fff000383838380138
38383859005d015d7259591b400910100d1b07070d021eb80333b46c020c
140db8032fb26c140500183f2b3f2b1139113312392f3031592515212637
36363736363534262322060727363633321615140606070606070407fc37
021725a39aefa8997b829c01b913f8d1d3f648a7c2a25c1eadad413c63c0
7ec4e5666b939c8a13cfd9eaad58aabca4886131>AMLJBM+ArialMT AddT42Char 
1 1868 22 <00010056ffe6041605c0002b01f6b0852b58b10202435458400b1918400d
0d0255181c0001b8ffc0402b0c0d02550129230a0d0f0c0f1e0a0a29151e
1c041e291c05290d230d0c181901001220100c0c0255200726b8ffe8b40c
0d0255262f2bcd2f2bcd2fcd2fcd2f0012393f3f10ed10ed12392fedc610
c6123910c42b3210c42b3231301b4030050d160d450d860d044511571176
1b0352166c106a146416750d7914860d8a14891ba50d0a0b0c0d0e040701
230d0c01b802a4b340000100bb01180029000d0135b40c0c150418ba02a4
001902684009151e1c05041e290d124110fff4000c000c014000560012ff
f2000b000b014000560012fff8000d000d014040115612735f206f200220
180d0d06552080074110fff4000c000c014000560007fff2000b000b0140
00560007fff8000d000d0140401156077326402123343026010026102602
26b8fff4b70d0d065526902d18b80138b219d301ba01380000ffc0400b21
2334200040000200902cb80192b18b182b10f65d2bedf4ed10f62b5d712b
ed2b2b2bf42b5ded2b2b2b003fed3fedfde41112392fed10fd5de4111239
01111217393130b00243b0405058b2052003b8ffe001383859015d005d01
71591b400900010104230c0d0f0ab8032fb56c0f0f1c2904b8032fb76c29
0d1918181c15b8032fb26c1c0500183f2b322f333f2b11392f2b33323911
392f33303159133716163332363534262322073716333236353426232206
072736363332161615140607161615140023222656b41f956b7fafa27d33
4c14120b73b8866a698c14b421eaae78ca6b66648290fee8d6c1ff018318
9987b0827ca1149e02787d6382848420b5c767b2645f9c2e1ebd8ec0fef5
e600>AMLJBM+ArialMT AddT42Char 
1 2500 23 <0002001a0000041005ba000a000d021cb0852b58bc000cfffa000c000c01
40b4560d060c0cb80140b456050c0c0cb80140b456060c0c0cb80140b456
090c0c0cb80140b4560a0c0c0cb80140b456050e0b0bb80140b456060e0b
0bb80140b456090e0b0bb80140b4560a0e0b0bb80140b45607080c0cb801
40b45608080c0cb80140b45607080b0bb80140b45608080b0bb80140b456
07080d0db80140b45608080d0db80140b45605080d0db80140b45606080d
0db80140b45609080d0db80140b4560a080d0db8014040375612580c680c
9a0ca90cc90c054c034c0d94040312010208000c060307050a0b0307000c
0c0d0dca030414030304030d00020c0d040703bb02bb0008000201a0400a
000404000c0c00ca0a04b80266b705050a401d1f340ab8ffe0b410100255
0ab8ffe6b40d0d02550ab8ffeeb40d0d06550ab80137400d074022233407
80213507900f02b8ffc0400b0d14340002100220020302b8ffe0b40d0d02
5502b8ffe4b60d0d065502b50eb8018cb18b182b10ec2b2b5d2b10f62b2b
f42b2b2b2b3c10e610fd3c003f3f10f43cf63c1139390111123939872e2b
047d10c40f0f0f313001435c58b9000dffdeb212390db8ffd4400b333903
222d3903041d1d3c2b2b2b2b595d005d435c5840140c400b390c8050390c
4026390c221c390c402d392b2b2b2b2b59012b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b002b1bb60c040906030d02b80332b76c0d0d04000c0405
00183f3f12392f2b33333212393031592111213501331133152311031101
0296fd84029d93c6c6b4fe35015fa503b6fc4aa5fea102040295fd6b>AMLJBM+ArialMT AddT42Char 
1 3098 24 <00010055ffe7042105a6001e0207b0852b58b3130c0c0cb80140b456120c
0c0cb80140b456130c0b0bb80140b456120c0b0bb80140b456130c0d0db8
0140b456120c0d0db901400056b10202435458b90001ffc0400d0d0d0255
011c0e0a1e15151c12b802bb400b0f04041e1c0d0e01000718b8ffeab40f
0f025518b8ffeab40d0d0255182f2b2bcd2fcd2f003fed3fed12392ffdc4
10c42b31301b4034120c0d0d06550f0c0d0d06554b1a791d8a1d9613a713
c30cd60cdb1b080913180e2a1a03130a15121313ca0e0f140e13140e0f0d
b802a440130e0a1e15400ea00e020e0e0f40150115151c12b802bbb70f04
01d340000100b801184011041e1c0d115f106f107f108f10041080074110
fff4000c000c014000560007fff2000b000b014000560007fff8000d000d
014040115607731840212334301801001810180218b8fff4b70d0d065518
902012bc0135000f0195000d0138b20eb501ba01380000ffc0400b212334
200040000200901fb80192b18b182b10f65d2bedf4edf4ed10f62b5d712b
ed2b2b2bf45d3c003fedfd5de43fed12392f5d11392f5d10ed10e487082e
2b057d10c4001112393130b00243b0405058b4093005300bbaffe00003ff
e001383838385901715d2b2b592b2b2b2b2b2b1b400c00001c0d130e0e0d
0d04150ab8032fb56c15150f1c04b8032fb46c1c0d0f12b80333b26c0f04
00183f2b3f2b11392f2b11392f3311331112392f30315913371616333236
35342623220607271321152103363332001514070623222655bd15996c82
b4ad8c578c28a98e02d9fdb74f8491c00108748df4c8fd0180108a8bc4a2
9ab24f3f1602f1acfe765cfef6d1c791b2e0>AMLJBM+ArialMT AddT42Char 
1 3716 25 <0002004dffe7041505c0001d002a01e9b0852b58b10202435458401f0f01
1f015f0103011b281e400d010d0d14051e1b05221e140d0a1e01002510b8
fff440190d0d0255101e17100f0f025517100c0c0255170c0d0d0255172f
2b2b2bcd2f2bcdd4cd10c5003fed3fed12392f5ded10c45d31301b402d6b
190144074015441944205a1254206b03640764086a1264207408751c8508
861cd608d4161107200d0d065527b8ffe0b40d0d065523b8ffe0401b0d0d
065521200d0d0655281e400d500d020d0d141b01d35f000100b802684009
051e1b05221e140d01b80138b200b5254110fff4000c000c014000560025
fff2000b000b014000560025fff8000d000d014040115625731040212334
301001001010100210b8fff0b70c0c065510902c0ab80138b31e0c0c0cb8
0140b4561e0e0b0bb80140b4561e080d0dbb01400056001e0139400d3f17
5f176f177f170417100b0bb80140b45617100c0db80140400e5617160c0c
065517160d0d065517b80224b32bc78b182b10f62b2b2b2b5ded2b2b2bed
10f62b5d712bed2b2b2bf4ed003fed3fedfd5de41112392f5ded3130b002
43b0405058b90007ffe0b42720232021b8ffe00138383838592b2b2b2b01
5d005d591bb50101050a0d28b8032fb56c0d0d1b1422b8032fb46c140d1b
05b8032fb26c1b0500183f2b3f2b11392f2b3212392f3031590107262726
232207060607363633321215140606232200111037363332160114161633
323635342623220603fbb3182c496b564155620241bc67b4fd77d084e1fe
e49d89e8adddfd374f8e4e72a4a27b7aaa04530e6a304d303eeedc6360fe
f7d28aed7e014b017c01a9c1a8c2fcdd5daa59b89e98afaf>AMLJBM+ArialMT AddT42Char 
1 4592 49 <0001009c0000051f05ba00090202b0852b58b303180c0cbe014000560008
ffe8000c000c0140b256120bb8ffc0400a13153408180c16025503b8ffe8
b40c16025503b8fff4402311114255080c11114255080203032007081407
070802070303080904020209070804034110fffb000c000c014000560003
fff2000b000b014000560003fffb000c000c0140b5560320060605b8ffec
b40f0f025505b8fff2400b0d0d025505120c0c025505b8fff7401a0b0b06
55055d200b01200b500b600b700b800b050b08090e0b0bb80140b456090a
0c0cb80140b45609200100b8ffc0400d13153420000100201010025500b8
fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c025500040b0b
065500b8fff7b40c0c065500b8fff8400a0d0d0655005d0a3b59182b10f6
2b2b2b2b2b2b2b5d2b3cfd2b2b3c105d71f42b2b2b2b3c10fd2b2b2b3c00
3f3c3f3c1239390111393987042e2b877dc4b10602435458b90003ffe0b7
0c113408200c1134002b2b592b2b31302b2b012b435c58b40840463903b8
ffc0b646390840323903b8ffc0b632390722193902b8ffdeb61939072232
3902b8ffdeb632390722233902b8ffde400b2339070e1439070e133902b8
fff4b61339070e1d3902b8fff4b61d39070e153902b8fff8b115392b2b2b
2b2b2b2b012b2b2b2b2b2b002b2b2b2b59002b2b1b400c03080001070800
080402010200183f3f3f3f11123939303159331133011133112301119cc7
0302bac7fcfe05bafb81047ffa460480fb80>AMLJBM+ArialMT AddT42Char 
1 5150 51 <0002009e000004fd05ba000d0018012eb0852b58401e65116b14024b104b
145b105b14040b0c1e0f0e0e0017181e0201020008124110fffe000c000c
014000560012fff2000b000b014000560012fff8000d000d0140b3561226
08bbfff6000d000d0140400e56080a0d0d025508100b0b065508b8fff440
120c0c0655081a201a01201a011a180d020c0cb80140b4560d0e0b0bb801
40b4560d0a0c0db80140400e560d200120000100201010025500b8fff6b4
0f0f025500b8fff6b40d0d025500b8fffa400b0c0c0255000c0b0b065500
b8fffab40c0c065500b8fff0400a0d0d0655005d193b5c182b10f62b2b2b
2b2b2b2b5d3cfd2b2b2b3c4e10715df62b2b2b2b4ded2b2b2b003f3f3cfd
3c12392f3cfd3c3130015d005d1bb10e0cb80333b76c0e0e0100080118b8
0333b26c010200183f2b3f12392f2b30315933112132171e021514022121
1111213236353426272623219e0229924d6c9259eefec9fe88017bbc9e5d
4c3184fe8905ba0e1265b66dbbfefdfdac03018c7f5c83150d00>AMLJBM+ArialMT AddT42Char 
2 3024 89 <0001001a000003e80426000a0263b0852b58bc0008fff2000b000b0140b4
56020e0b0b410d014000560000ffea000d000d014000560008ffea000d00
0d0140b45602160d0d410d014000560000fff4000c000c014000560008ff
f0000c000c0140b45602100c0cb901400056b1020243545840170508000a
080601060a0005090805010205240f0f0255052f2bddcd10ddcd11333300
3f3f3f123931301bb7350501002211390ab8ffde400d11390916121c3408
16121c3402b8ffeab3121c3401b8ffeab3121c340ab8ffd840091e213400
281e21340ab8ffe8400922253400162225340ab8ffda407e282e34002028
2e340f0c29002809260a3900350a4800470a560156025908580966016602
6908690978007701770279087809770a870187028603890788088a099d00
9809910aac00a20abd00b707b10ac900c50ada00d50aec00e30afb00f40a
2c0a00050a1800160a2800260a370a4f00400a09054012163405400b0d34
b10602435458400905010008060106000ab8fff4400f0d0d06550a000c0d
0d065500050908b8fff440120d0d0655080501020c0d0d06550205050c0b
1112392fdd2bcd10dd2bcd10cd2bcd2b002f3f3f11123931301b40370a07
080825090a1409090a0003020225010014010100050a0a000a0908080202
0106070a09030001052f0c010c22084040400980090209b8011bb5400580
050205b8011b400920024001220bead2182b10f6ed1a19fd5dfd5d1a18ed
e45d11123939123939003f3c103c103c3f3c113987052e2b877dc4872e18
2b877dc4593130002b2b01715d2b2b2b2b2b2b2b2b2b2b2b2b005d59012b
2b2b2b2b2b2b2b1bb605000a0806010600183f3f3f333031592101331316
17363713330101aefe6cbee4251f182becb9fe6e0426fd84676f54760288
fbda>AMLJBM+ArialMT AddT42Char 
AMLJBM+ArialMT /CharStrings get begin
/g20 20 def
/g21 21 def
/g22 22 def
/g23 23 def
/g24 24 def
/g25 25 def
/g49 49 def
/g51 51 def
/g89 89 def
end
AMLJBM+ArialMT /Encoding get
dup 49 /g20 put
dup 50 /g21 put
dup 51 /g22 put
dup 52 /g23 put
dup 53 /g24 put
dup 54 /g25 put
dup 78 /g49 put
dup 80 /g51 put
dup 118 /g89 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AMLJBM+ArialMT*1 
[32{/.notdef}rp /g3 8{/.notdef}rp /g12 7{/.notdef}rp /g20 /g21 /g22 
/g23 /g24 /g25 15{/.notdef}rp /g41 7{/.notdef}rp /g49 /.notdef 
/g51 16{/.notdef}rp /g68 /g69 /g70 /.notdef /g72 /g73 
/g74 /.notdef /g76 2{/.notdef}rp /g79 /g80 /g81 /g82 
/.notdef /g84 /g85 /g86 /g87 /g88 /g89 2{/.notdef}rp 
/g92 134{/.notdef}rp]
AMLJBM+ArialMT nf
AMLJBM+ArialMT*1 [9 0 0 -9 0 0 ]msf
38.744 111.427 mo
(P1P2P3P4P5P6None)
[6.00307 7.92414 6.00307 7.92415 6.00307 7.92413 6.00307 7.92416 6.00307 7.92413 6.00306 2.67418 
6.49635 5.00262 5.00262 0 ]xsh
AMLJBM+ArialMT*1 [9.9 0 0 -9.9 0 0 ]msf
52.7795 124.677 mo
(Positive events)
[6.60337 5.50288 4.95 2.19599 2.75386 2.19599 4.95 5.50288 2.75386 5.50288 4.95 5.50288 
5.50288 2.75386 0 ]xsh
37.4045 15.6273 mo
37.4045 98.8773 li
@
134.905 15.6273 mo
134.905 98.8773 li
@
37.4045 23.9523 mo
38.3795 23.9523 li
@
37.4045 40.6023 mo
38.3795 40.6023 li
@
37.4045 57.2523 mo
38.3795 57.2523 li
@
37.4045 73.9023 mo
38.3795 73.9023 li
@
37.4045 90.5523 mo
38.3795 90.5523 li
@
134.905 23.9523 mo
133.93 23.9523 li
@
134.905 40.6023 mo
133.93 40.6023 li
@
134.905 57.2523 mo
133.93 57.2523 li
@
134.905 73.9023 mo
133.93 73.9023 li
@
134.905 90.5523 mo
133.93 90.5523 li
@
%ADOBeginSubsetFont: IAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AMLJBM+ArialMT gcheck setglobal} if
1 5536 54 <0001005cffe704eb05d300300341b0852b5841110027fff8000d000d0140
00560026fff8000d000d014000560025fff8000d000d0140b45618100c0c
b80140b45619100c0cb80140b4561a100c0c411f01400056000dffe8000b
000b01400056000cffe8000b000b01400056000bffe8000b000b01400056
001cffe8000b000b01400056001bffe8000b000b0140b45603180b0bb801
40b45602180b0bb80140b45601180b0bb801404028566303630473037404
0425273503391c430349074c1d451f44244627530359075c1d572889130e
23b8fff2b41010025524b8fff2b41010025525b8fff2b41010025526b8ff
f2b41010025527b8fff2b41010025523b8fff6b40d10025524b8fff6b40d
10025525b8fff6b40d10025526b8fff6b40d10025527b8fff640460d1002
55280d26240224032725360f34234425452f5a20562355256c0b6a0d6b0e
66146518790b7a0d7a0f7d107524732586038a0b890d8a0f8d1085248325
920d960f96151eb10602435458402d2126121b261a09262901260000291a
120432312600650002000d2d791b891b021b25160d2d1e27250125051605
b8fff4400c0c0c0655051e2d091e1e1603003fed3fed2b1112395d111239
1112395d1112395d01111217392fed2fed2fed2fed1b402d25240e0d0b05
211c1d1e1b08070604030206012524220e0d0b06051e1b2d1a400c0c0255
8f1a011aed16002d01b8ffc040120c0c0255100120015001600170019001
0601b801b0400c2d1e20131342551e1e160305b8ffe0400d13134255051e
2d091b261a4a094110fff4000c000c014000560009fff2000b000b014000
560009fff8000d000d0140b656092600290129b8ffeab40e0e025529b8ff
f4400b0c0c0255291a32210c0c0cb80140b456210e0b0bb80140b4562108
0d0db80140b656212612012612b8ffecb40e0e025512b8fff6b40d0d0255
12b8fff8400f0c0c02551254200001001931635b182b4e10f45d4de42b2b
2bed10ed2b2b2b4e10f62b2b5d4ded2b2b2bf4ed003fed2b3fed2b10fd5d
2be410fd5d2bf4111217391117391112393901121739593130005d712b2b
2b2b2b2b2b2b2b2b015d712b2b2b2b2b2b2b2b2b2b2b002b2b2b1bb7011b
012d1b162d05b80333b46c2d0b161eb80333b26c160300183f2b3f2b1139
12392f2f30315913371e0233323636353426272624272626353436363332
161617072626232206151417160417161615140606232224265cb70d5fc8
7d6faa53505c3bfe6c5169677ef294a3f98605ba0fada9b0a1393801d958
807a86fb9dc7fef39901d7106e8d5742734445672317612b37a3656fc164
69cc810e8b8e815b4f33336b283bb57675cf7374e900>AMLJBM+ArialMT AddT42Char 
AMLJBM+ArialMT /CharStrings get begin
/g54 54 def
end
AMLJBM+ArialMT /Encoding get
dup 83 /g54 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AMLJBM+ArialMT*1 
[32{/.notdef}rp /g3 8{/.notdef}rp /g12 7{/.notdef}rp /g20 /g21 /g22 
/g23 /g24 /g25 15{/.notdef}rp /g41 7{/.notdef}rp /g49 /.notdef 
/g51 2{/.notdef}rp /g54 13{/.notdef}rp /g68 /g69 /g70 /.notdef 
/g72 /g73 /g74 /.notdef /g76 2{/.notdef}rp /g79 /g80 
/g81 /g82 /.notdef /g84 /g85 /g86 /g87 /g88 
/g89 2{/.notdef}rp /g92 134{/.notdef}rp]
AMLJBM+ArialMT nf
AMLJBM+ArialMT*1 [9 0 0 -9 0 0 ]msf
23.3545 27.7023 mo
(S1)
[6.00307 0 ]xsh
23.3545 44.3523 mo
(S2)
[6.00307 0 ]xsh
23.3545 61.0023 mo
(S3)
[6.00307 0 ]xsh
23.3545 77.6523 mo
(S4)
[6.00307 0 ]xsh
23.3545 94.3023 mo
(S5)
[6.00307 0 ]xsh
AMLJBM+ArialMT*1 [0 -9.9 -9.9 0 0 0 ]msf
19.1045 91.7523 mo
(Stressor events)
[-6.60338 -2.75386 -3.29662 -5.50288 -4.95 -4.95 -5.50288 -3.29662 -2.75388 -5.50287 -4.95001 -5.50287 
-5.5029 -2.75385 0 ]ysh
145.405 100.377 mo
155.155 100.377 li
@
145.405 15.6273 mo
155.155 15.6273 li
@
145.405 100.377 mo
145.405 15.6273 li
@
155.155 100.377 mo
155.155 15.6273 li
@
gsave
145.405 100.377 mo
155.155 100.377 li
155.155 15.6273 li
145.405 15.6273 li
cp
clp
145.345 100.437 mo
155.165 100.437 li
155.165 15.6173 li
145.345 15.6173 li
cp
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 17.3455 255.927 ]ct
[9.82 0 0 84.82 127.999 155.49 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 26 
/H 226 
/M[26 0 0 -226 0 226 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
kJ-2^kH!e.lG*>5kH3pJkN:sBmB-8fkGm_)kJ-2^n>c8`kMk[>kH3pIoA]H&kJ-2^kGm_)p:g+3kH*jH
kMGC9q5j%dkGm_%kJ$,\r2T+`kMGC8kH*jGs4cemkIp&[kGd\"!8H\MkH*jGkM,=9rOqBqkGdY!kIg5`
qQ&eXkLSh/kH"-OpSd9+kIfuYkG\%(o[`3;kH!dDkKin7n[mtbkGRLhkI^Skm]5NKkKi>'kH"QZl_ipl
kITiVkGA7%kfW)"kGm^Bl,s%KkITiVkGIFbm(*&)kGdX@kJQJnn#?,^kG@@ZkIKcTntl&VkJQJnkGdX@
ou$C=kIB]RkG7:Sppfh'kG[R>kIp&gql&n\kG7:SkI0QOrhJbRkHsE\kGRL<kHsE\kGRL<lEpPtkI0QO
kG.4ImBui!kG@@9kH*jSn>5oVkG%.@kI'KLo:koPkH*jRkG.45p7h,PkHsEIkFh"4q6]UtkG.45kG%.H
lD+?RkFh"4kHa9Fm@X9JkF1S>kG%.3n='-@kHa9FkF^q+o<ItnkFh"/kE4r4p7UuLkFLdukHX3Cq46uF
kE4r4kFh"/r/p?.kHF'?kF:Xjs0([jkFUk+kD8?*!3bRWkF:XjkH=-@rLE&=kC;ZtkFCt.qO-MrkH=!<
kF(jipODA/kFC_'kC<-*oW75FkEk@TkH+EInXJ^.kB?$ikF;=7m[**[kH*j9kEl-jlZVHlkF(LukAC:#
kc<m7kEY4Jl)XibkF(LukAKI^m$IX:kEG(AkGdX2n!!R2k@`tWkEk@qnn7Z/kGdX2kEG(Aor%DZkEP.l
k?mDMplt94kE4q7kGRL-qiU9.k?mDKkE>"hr`JGfkG@@)kE"e.kG@@)kE"e.lD=KVkE>"hk?-oBm?%4,
kDeY%kG.4%n;[4&k>CE;kE+kdo250XkFh!tkDSLqp7UuLkDeY_k=Xp1q2Oj&kDSLqkFh!tlAPY"k=Xp/
kDJGYm6gb<kFUjokD8:gn=KEHkDJGYk<nF&o8!!okCr(^kFC^jp4`'kk<8!ukD/5Sq*"10kFC^jkCr(^
r0co>kCi#Nk;MLks+KWikC_qUkF(Oe!/0Nfk;MLhkCMrLrIF&bkEb:^kCDtSqCq)ukCMfHk:lFlpQjun
kCD_LkEGOeoR>tOk:>_ZkC3/RnU9RNkEG(XkC*1WmORI^c$JP!rK-?,c$JP!kE#[ic?eY"kE+qSja-)9
kDdo6r-.<HkDd`1mi_EKkDd`1k90>Pp5.%9k8WT@olSl/k8WT@hK87/k8WT@c#ih%m2P5Cc#Dh^reB]m
c#Dh^kD%6#k83<4l>5Ntk7Zs/dqnntk7Zs/c"uk^p_)b@c"uPUo7$@]c"cDOkC3,>fP9RZkC2<'mqV"q
kC1Zjl43e'kBkHdk6p[(qg6S#k6pI"n7UTjk6pHsfjj\bk6U6pc"$GQnd+E&c"#oBq02:Oc"#oBkB$Q.
dU2/AkB#`ll!NTXkB"pU!+4mnkATNfk?R<Ur<2;%k?I+Sk613kqJYP$k?R0QkATlppKQfck60s`k?%:X
oN:8XkA06^k?.H[nH.lhk?$hKk5tKnmV(c^k>g[Gk@jfmlVltHk5jaZk>M@\kZ-dHk@j$WkuIa`k5jaU
k>18<liI"bk@<[Nk>CCCmpl0'k>18<k5jaPnk8[Lk=t+?k?d=EohG$Pk5jaPk=au4p]9jbk?d=Ek=t+?
qcW;hk==],k5a[Jr^Z6Dk=Oh:k?6t<k=Oh:k>g\5l:1bBk5a[Fk="K&m/["`k>g\5k=4V7n5]6`k="K&
k5a[Ao0Dt6k<\82k>:>,p-J78k5a[Ak<S2rq#Kj`k=au#k<7u.l:_+Lk<.ojk5a[<m6(8.k<7u.k=au#
n3-P0k5a[7brG:po`4/EbrFkdp."UBbrFkdk<eu$mkj2bk5a[3k;<)olo!r+k<e>gk;E8>klBm5k;;?Z
kPtS_k<7'Dk5ag2rB8CZk5a[.mP*QQk5a[.f.cqQk5a[)bq/JeoDn&6bq/#XpGh\&bq/#Xk;E)be1'P\
k;D9KlRCusk;CL5!!)3_k;CL5klC_`k:k.,k5aj&r%QAAk5a[!mj6j;k5aZqfHKr3k5aZqbou`[o)Rr(
bou6Mpabhabou6Mk9g'HdiITOk9f71l5f$fk9eFok5aZgbo5jIrW)+)bo5aFm32?Mbo5aFk99=5hAYPW
k8i4kobQ]jk8he_p&OX`k8he_k5b;qmhs@`k5aZ_l4`4lk5aZ_dhDTlk5aZ_bnKRHp]0Ikbn0%<o+^j3
bn0%<k7mV$fF[3Gk7HMZmgS@Zk7GlHquH'`k7GlHk5bMnkn))Jk5a]T!"I0[k5aZSlO)YZk5aZSe-c$Z
k5aZObm3b=pAj@_bm3D3oEk-rbm3D3k6^kff*CI=k69cHmKD\Qk69*5r;c-`k69*5k5YJakQB'2k5a`K
rr^LIk5aZIliQ/Jk5aZIeH5OJM?&5.JcLB&df=m~>

%%EndBinary
grestore
np
grestore
155.155 100.377 mo
155.155 15.6273 li
@
155.155 87.3003 mo
154.307 87.3003 li
@
155.155 65.5043 mo
154.307 65.5043 li
@
155.155 43.7093 mo
154.307 43.7093 li
@
155.155 21.9143 mo
154.307 21.9143 li
@
AMLJBM+ArialMT*1 [8.1 0 0 -8.1 0 0 ]msf
158.775 90.3003 mo
(2)sh
158.775 68.5054 mo
(3)sh
158.775 46.7101 mo
(4)sh
158.775 24.9148 mo
(5)sh
145.405 15.6273 mo
155.155 15.6273 li
@
145.405 100.377 mo
155.155 100.377 li
@
145.405 100.377 mo
145.405 15.6273 li
@
155.155 100.377 mo
155.155 15.6273 li
@
145.405 100.377 mo
145.405 100.377 li
.71957 .637842 .593957 .13254 cmyk
@
145.405 15.6273 mo
145.405 15.6273 li
@
155.155 100.377 mo
155.155 100.377 li
@
155.155 15.6273 mo
155.155 15.6273 li
@
221.905 98.8773 mo
319.405 98.8773 li
319.405 15.6273 li
221.905 15.6273 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
.813809 .795224 .767361 .606043 cmyk
%ADOBeginSubsetFont: IAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AMLJBM+ArialMT gcheck setglobal} if
1 14290 83 <00020087fe690421043e0012001e01d5b0852b5840740c102d103d104b10
043f20b020021f20290c231d3215321d421d70209020083a173a1b4a174a
1b59085b0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee4
14e41ee020ff201623042b102b1535043a1046044a105a10e50beb1dfe10
0b110e03161c1c06070106161c0e0b000e194110fff2000b000b01400056
0019fff4000c000c014000560019fff8000d000d0140401c561924d00a01
100a400a600a800a0420400b0b025520400d0d02550ab8ffe6400b0f0f02
550a180d0d02550ab8fffab40c0c02550ab8ffeeb40b0b06550ab8fff4b4
0f0f06550ab8ffe8400f0c0c06550a74011333023312080d0db80140b456
120e0b0bb80140b456120c0c0cb8014040195612250000c001019001a001
b001f001041f013f014f010301b8fffc401d0e0e025501100d0d02550110
0c0c025501100b0b0255010c0b0b065501b8fff6b41010065501b8fffc40
160f0f0655010c0c0c065501120d0d065501191f473718012b4e10f42b2b
2b2b2b2b2b2b2b5d71723c4d10fd2b2b2bf4e410fd2b2b2b2b2b2b2b2b5d
71ed2b2b2b003f3fed3f3fed113912393130005d015d717200711bb4000e
110e16b8032fb76c0e0b010603061cb8032db26c060700183f2b323f3f2b
393f30315913113315363633321616151402062322262711031416333236
35342623220687a43a926888d06a75df7b5a8f2e11a67678aba77473b1fe
6905bd8a51518cff98a3fefb8b4c3afdfb03a4cdc4cbd5cbcad7>AMLJBM+ArialMT AddT42Char 
AMLJBM+ArialMT /CharStrings get begin
/g83 83 def
end
AMLJBM+ArialMT /Encoding get
dup 112 /g83 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AMLJBM+ArialMT*1 
[32{/.notdef}rp /g3 8{/.notdef}rp /g12 7{/.notdef}rp /g20 /g21 /g22 
/g23 /g24 /g25 15{/.notdef}rp /g41 7{/.notdef}rp /g49 /.notdef 
/g51 2{/.notdef}rp /g54 13{/.notdef}rp /g68 /g69 /g70 /.notdef 
/g72 /g73 /g74 /.notdef /g76 2{/.notdef}rp /g79 /g80 
/g81 /g82 /g83 /g84 /g85 /g86 /g87 /g88 
/g89 2{/.notdef}rp /g92 134{/.notdef}rp]
AMLJBM+ArialMT nf
AMLJBM+ArialMT*1 [9.9 0 0 -9.9 0 0 ]msf
192.28 11.5213 mo
(b\) Frequency of positive microblogs)
[5.50288 3.29663 2.75386 6.05032 3.29663 5.50288 5.50288 5.50287 5.50287 5.5029 4.94998 4.95001 
2.75385 5.50293 2.75385 2.75388 5.50287 5.5029 4.94998 2.19598 2.75385 2.19601 4.94998 5.50287 
2.75388 8.24661 2.19598 4.95001 3.29663 5.50287 5.50287 2.19598 5.5029 5.5029 0 ]xsh
gsave
221.905 98.8773 mo
319.405 98.8773 li
319.405 15.6273 li
221.905 15.6273 li
cp
clp
221.845 98.9373 mo
319.465 98.9373 li
319.465 15.6173 li
221.845 15.6173 li
cp
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 17.3455 255.927 ]ct
[97.62 0 0 83.32 204.499 156.99 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 119 
/H 85 
/M[119 0 0 -85 0 85 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
n>Gb=n;6YBn1a@2n1a['pm(>&n9"/rn0RRjn0RUf!0Zh*n9"/on0RRgn0RR4q>g6in/Lkun,Vrkn,VsU
nid"9n;6YBn1a@2n1a?sn1a`]p2of#n0RRjn0RRen1aHUrcIY(n0RRgn0RR4n,Vqsr2fRmn,Vrkn,VsU
n3-8toX4Y*n1a@2n1a?sn1a?Rn>6(0oHj!nn0RRen1a?Rn=oS%r$Cisn0RR4n,Vqsn>u*Zrb1n:n,VsU
n3-8tn?qa>p8Rqgn1a?sn1a?Rn>5V#n<a/$ng3dgn1a?Rn=oCun<EYnqBbW>n,Vqsn>u*Zn7_:k!2o@b
n3-8tn?qa>n>Yn2pm(Z?n1a?Rn>5V#n<`Vjn<38pn9"/on0RRgn0RR4q#L0in/Lkun,Vrkn,VsUnN?k8
n;6YBn1a@2n1a?sn1a]\pN5o$n0RRjn0RRen1aETs)db)n0RRgn0RR4n,VqsqlKLmn,Vrkn,VsUn3-8t
o<nS*n1a@2n1a?sn1a?Rn>6%/od0*on0RRen1a?Rn=oP$r?^rtn0RR4n,Vqsn>u*ZrFkh:n,VsUn3-8t
n?qa>or7kgn1a?sn1a?Rn>5V#n<a,#o-Nmhn1a?Rn=oCun<EVmq^(`?n,Vqsn>u*Zn7_:ks/5Fcn3-8t
n?qa>n>Yn2pQbT?n1a?Rn>5V#n<`Vjn<38pn9"/on0RRgn0Rm=pgNXln/Lkun,Vrkn,W!V!2o<Ln;6YB
n1a@2n1a?sqCqXtn9"/rn0RRjn0RRenhC(tn9"/on0RRgn0RR4n,W>)p)EM&n,Vrkn,VsUn3-B"re^-P
n1a@2n1a?sn1a?Rr2'(_n0RRjn0RRen1a?RoV2;Yn0RRgn0RR4n,Vqsn>uQgoDnAon,VsUn3-8tn?qpC
r%RW>n1a?sn1a?Rn>5V#rg35Cn0RRen1a?Rn=oCup6>H=n0RR4n,Vqsn>u*Zn7_h%nc80Wn3-8tn?qa>
n>Z.9qCqE(n1a?Rn>5V#n<`Vj!0Zl8n1a?Rn=oCun<EDgpgNu,n,Vqsn>u*Zn7_:kn>Gb=n;6YBn1a@2
n1a?sq(VRtn9"/rn0RRjn0RRenLsqsn9"/on0RRgn0RR4n,W;(pD`V'n,Vrkn,VsUn3-?!s,$6Qn1a@2
n1a?sn1a?Rqka"_n0RRjn0RRen1a?Ro:l5Yn0RRgn0RR4n,Vqsn>uNfo`4Jpn,VsUn3-8tn?qmBr@m`?
n1a?sn1a?Rn>5V#rKm/Cn0RRen1a?Rn=oCuop#B=n0RR4n,Vqsn>u*Zn7_e$o)S9Xn3-8tn?qa>n>Z+8
q_7N)n1a?Rn>5V#n<`Vjs,ur9n1a?Rn=oCun<EDgpL3o,n,Vqsn>u*Zn7_:kn>l%9n8.U+n>Yo[n14=&
pmLV#n6#1\n<`X8n0.=f!1*+'n6,7Yn<EF2n0.:?q>g6in,r1+n7_<Bn,VsYnhpG)n8.U+n>Yo[n14!r
n1"6:p/pgbn<`X8n0.:en1!s3r`S`gn<EF2n0.:?n,Vq[r6P&^n7_<Bn,VsYn29]OoXk(6n>Yo[n14!r
n1!j/n>lMSoU#'<n0.:en1!j0n>GrDr06]>n0.:?n,Vq[nB^T;rdjZln,VsYn29]On@S1hp9+:qn14!r
n1!j/n>l&Fn=BS&nfdLgn1!j0n>Gc?n='(pqB>?In,Vq[nB^T;n:C'/!3>Xjn29]On@S1hn?272pmLrG
n1!j/n>l&Fn=B%ln<WPmn6,7Yn<EF2n0.:?q#L0in,r1+n7_<Bn,VsYnML;(n8.U+n>Yo[n14!rn1"39
pK6pcn<`X8n0.:en1!p2s&nihn<EF2n0.:?n,Vq[qp4u^n7_<Bn,VsYn29]Oo=P"6n>Yo[n14!rn1!j/
n>lJRop>0=n0.:en1!j0n>GoCrKQf?n0.:?n,Vq[nB^T;rIOTln,VsYn29]On@S1hore4qn14!rn1!j/
n>l&Fn=BP%o-*Uhn1!j0n>Gc?n='%oq]YHJn,Vq[nB^T;n:C'/s/Y^kn29]On@S1hn?272pR1lGn1!j/
n>l&Fn=B%ln<WPmn6,7Yn<EF2n0.UHpi,^&n,r1+n7_<Bn,W!Z!3>THn8.U+n>Yo[n14!rqC2.fn6#1\
n<`X8n0.:engXSfn6,7Yn<EF2n0.:?n,W=fp&jg1n7_<Bn,VsYn29fRrbV)9n>Yo[n14!rn1!j/r2]Lk
n<`X8n0.:en1!j0oV_Ycn<EF2n0.:?n,Vq[nB_&HoP!`Fn,VsYn29]On@S@mr2K1gn14!rn1!j/n>l&F
rgiYOn0.:en1!j0n>Gc?p6tlIn0.:?n,Vq[nB^T;n:CT>nc80[n29]On@S1hn?2L9qCD''n1!j/n>l&F
n=B%l!1*/@n1!j0n>Gc?n=&hipi-%Jn,Vq[nB^T;n:C'/n>l%9n8.U+n>Yo[n14!rq'l(fn6#1\n<`X8
n0.:enL4Gen6,7Yn<EF2n0.:?n,W:epB0p2n7_<Bn,VsYn29cQs(q2:n>Yo[n14!rn1!j/qlBFkn<`X8
n0.:en1!j0o;DScn<EF2n0.:?n,Vq[nB_#Gok<iGn,VsYn29]On@S=lrMf:hn14!rn1!j/n>l&FrLNSO
n0.:en1!j0n>Gc?opYfIn0.:?n,Vq[nB^T;n:CQ=o)S9\n29]On@S1hn?2I8q^_0(n1!j/n>l&Fn=B%l
s-E5An1!j0n>Gc?n=&hipMftJn,Vq[nB^T;n:C'/n1a>Qn4)npn5/V+n,W81pa,DGn2ToNn3HJ[n,Vu)
!%%+Nn2ToNn3QP\fDt%6n-nddn.Y9kn1aDSruUZ!n9j_%n:L-0n0RQ?q`+:/n7_;Vn87Xpn0RQ?o/Q_/
n7_;Wn85i=r!`6,n,Vqkn,Vr3n/h'goR-Ubn5/V+n,Vr(n/(RRn7_bcoK_n_n,Vr(n/(RRn7_J\r'Bgh
]`@O1n,WG$o+UTnn1a>Qn4)npn5/h1qh";;n0RQ?n2ToNn3HJ[rrDTin0RQ?n2ToNn3QP\pAi56n-ndd
n.Y9k!&3psn/h'gn9j_%n:L-0pa,_^n/(RRn7_;Vn87Xpn0RQ?n2ToNn3QP\f)Xt6n-nddn.Y9kn1aAR
!$:W!n9j_%n:L-0n0RQ?qDe4/n7_;Vn87Xpn0RQ?ni6Y/n7_;Wn85i=q[E0,n,Vqkn,Vr3n/h'go6gOb
n5/V+n,Vr(n/(RRn7__bog&"`n,Vr(n/(RRn7_G[rB]pi]`@O1n,WD#oFp]on1a>Qn4)npn5/e0r.=D<
n0RQ?n2ToNn3HJ[rW)Nin0RQ?n2ToNn3QP\p&N/6n-nddn.Y9ks"O!tn/h'gn9j_%n:L-0pEfY^n/(RR
n7_;Vn87Xpn0RQ?n2ToNn3QP\kQ'06n-nddn.Y9knLsqsn/h'gn9j_%n:L-0n0RoIpD<<Yn7_;Vn87Xp
n0RWArtk/an7_;Wn865Hp&ORjn,Vqkn,Vr3n/h0jr^QC)n5/V+n,Vr(n/(RRr+Pb:n3HJ[n,Vr(n/(RR
oP"2:n3QP\]`@O1r;cHin.Y9kn1a>Qn4)npohbQ_n:L-0n0RQ?n2ToNn3Htio53ssn0RQ?n2ToNn3Qbb
qea"Hn-nddn.Yg%nc8/5n/h'gn9j_%n:LB7q>g"2n/(RRn7_;Vn87Xp!%%.]n/(RRn7_;Wn87=gf)Y:K
n,Vqkn,Vr3n/h'gn9j_%n:L-0n0RlHp_WEZn7_;Vn87Xpn0RT@!#P,an7_;Wn862GpAj[kn,Vqkn,Vr3
n/h-is$lL*n5/V+n,Vr(n/(RRqe5\:n3HJ[n,Vr(n/(RRo4\,:n3QP\]`@O1quHBin.Y9kn1a>Qn4)np
oMGK_n:L-0n0RQ?n2ToNn3HqhoPO'tn0RQ?n2ToNn3Q_ar,'+In-nddn.Yd$o)S86n/h'gn9j_%n:L?6
qZ-+3n/(RRn7_;Vn87Xps!@4^n/(RRn7_;Wn87:ffDtCLn,Vqkn,Vscn29^$nA"I\n?DC4q5*k_n1!jX
n?)25n=T1nnY-#Xn1!jWn>l&2n=8tkn>uHdpAj\:nE03un;?]8n?qgEs#';3nA"I\n?DC4n>5V'qgnHl
n?)25n=T1nn=oD$o76gjn>l&2n=8tkn>u*Zn1ae&p#ba%n;?]8n?qaCn<W^]rP.iin?DC4n>5V'n:C)2
rIjfrn=T1nn=oD$n::#/on30pn=8tkn>u*Zn1a@on2C9'o8<#;n?qaCn<WRYn<s!SqloQ?n>5V'n:C)2
n:^;'rupqVn=oD$n::#/n:U5#pEBAVn>u*Zn1a@on2Bcnn,NHrn[7jDn<WRYn<rdMn14:1q5*R0n:C)2
n:^;'n0.:qn1!jWn>l&2n=8tkn>uEcp]0e;nE03un;?]8n?qdD!&a83nA"I\n?DC4n>5V'qLSBln?)25
n=T1nn=oD$nppajn>l&2n=8tkn>u*Zn1ab%p?(j&n;?]8n?qaCn<W[\rkIrjn?DC4n>5V'n:C)2r.O`r
n=T1nn=oD$n::#/oRm*pn=8tkn>u*Zn1a@on2C6&oSW,<n?qaCn<WRYn<rsRr35Z@n>5V'n:C)2n:^;'
rZUkVn=oD$n::#/n:U5#p*';Vn>u*Zn1a@on2Bcnn,WKro!RsEn<WRYn<rdMn1470qPE[1n:C)2n:^;'
n0.:qn1!jWn>l&2n=8tkq5j@mn,Vr3nE03un;?]8n[/A)n29^$nA"I\n?DC4n>5t1pF5T_n?)25n=T1n
n=oJ&s!dGfn>l&2n=8tkn>u*Zq_7^tnE03un;?]8n?qaCo9TBAnA"I\n?DC4n>5V'n:CM>or[_:n=T1n
n=oD$n::/3rN#F?n=8tkn>u*Zn1a@orAO:+n;?]8n?qaCn<WRYopP`Gn?DC4n>5V'n:C)2n:^e5o:PLq
n=oD$n::#/n:UG)qjd.!n>u*Zn1a@on2BcnrrDTin?qaCn<WRYn<rdMpFH(jn>5V'n:C)2n:^;'n0%e+
nY5M%n::#/n:U5#n0.S.q5j&cn1a@on2Bcnn,Vscn29^$nA"I\n?DC4n>5q0paP]`n?)25n=T1nn=oG%
!%IDfn>l&2n=8tkn>u*ZqCqXtnE03un;?]8n?qaCns9<AnA"I\n?DC4n>5V'n:CJ=p9!h;n=T1nn=oD$
n::,2ri>O@n=8tkn>u*Zn1a@or&44+n;?]8n?qaCn<WRYoU5ZGn?DC4n>5V'n:C)2n:^b4oUkUrn=oD$
n::#/n:UD(r1*7"n>u*Zn1a@on2BcnrW)Nin?qaCn<WRYn<rdMp+-"jn>5V'n:C)2n:^;'n0.h+ntPV&
n::#/n:U5#n0.P-qQ0/dn1a@on2Bcnn,VrNn0@F0n>5W/n=K+Vq)nF7n/Ljjn<<?\n;?]@nN?k8n/Ljl
n<!-Yn;-Q>klCGXn,`#^n/(R]n,VrNng"/Zn6b[]n:pG(n-\YIn/M6up.Xt>n8RlSn-JMHn/Lsor_DsE
n8RlQn-InOn,`Gjoigi$n3c[Fn4W6qn6bgarMB"<n=K+Vn3$1Zn4`>8rG_CJn;?]@n3-7[n4rJ7ol0hJ
n;-Q>hZ3-Hn65;tr^69En,VrNn0@F0n>5W/p7D/Qn-\YIn/Ljjn<<?\n;@5Ond+_Jn/Ljln<!-Yn;-fE
q?YsYn,`#^n/(R]n,NG]nOr?rn6b[]n:pG(n-\qQq)n-cn4`>8n8RlSn-JMHn/Ljln<!-Yn;-Q>kQ(AX
n,`#^n/(R]n,VrNnKS#Yn6b[]n:pG(n-\YIn/M3tpIt(?n8RlSn-JMHn/Lpns%`'Fn8RlQn-InOn,`Di
p0-r%n3c[Fn4W6qn6bd`rh]+=n=K+Vn3$1Zn4`>8r,D=Jn;?]@n3-7[n4rJ7oPjbJn;-Q>hZ3-Hn65;t
rBp3En,VrNn0@F0n>5W/oq))Qn-\YIn/Ljjn<<?\n;@2No*FhKn/Ljln<!-Yn;-cDqZu'Zn,`#^n/(R]
n,WJ]nk8Hsn6b[]n:pG(n-\nPqE46dn4`>8n8RlSn-JMHn/Ljln<!-Yn;-Q>q#KRXn,`#^n/(R]n,VuO
!))f+n6b[]n:pG(n-\YIqA]/Jn4`>8n8RlSn-JMHnf.TJn4rJ7n8RlQn-InOqZ6Bkn65;tn3c[Fn4W6q
o3_K(n>5W/n=K+Vn3$1Zn4`bDoonlan;?]@n3-7[n4rV;rK-Mfn;-Q>hZ3-Hn65c,oG@!an,VrNn0@F0
n>5f4r.a^4n-\YIn/Ljjn<<?\reg<)n-JMHn/Ljln<!-Yp5&U%n-InOn,`#^n/(R]rrDTin4W6qn6b[]
n:pG(pBpa(n3$1Zn4`>8n8RlSn-B"WnNH@\n4rJ7n8RlQn-JdhkQ()Qn65;tn3c[Fn4W6qn6b[]n:pG(
n-\YIq&B)Jn4`>8n8RlSn-JMHnJ_HIn4rJ7n8RlQn-InOq>p<kn65;tn3c[Fn4W6qnmDE(n>5W/n=K+V
n3$1Zn4`_Cp64ubn;?]@n3-7[n4rS:rfHVgn;-Q>hZ3-Hn65`+ob[*bn,VrNn0@F0n>5c3rJ'g5n-\YI
n/Ljjn<<?\rJL6)n-JMHn/Ljln<!-Yon`O%n-InOn,`#^n/(R]rW)Nin4W6qn6b[]n:pG(p'U[(n3$1Z
n4`>8n8RlSn-K%WnicI]n4rJ7n8RlQn-JagklC2Rn65;tn3c[FJ,~>

%%EndBinary
grestore
np
grestore
gsave
-17.3455 -6.87268 mo
-17.3455 260.127 li
402.655 260.127 li
402.655 -6.87268 li
cp
clp
221.905 98.8773 mo
319.405 98.8773 li
.746853 .66949 .627771 .212955 cmyk
@
221.905 15.6273 mo
319.405 15.6273 li
@
228.869 98.8773 mo
228.869 97.9023 li
@
242.798 98.8773 mo
242.798 97.9023 li
@
256.727 98.8773 mo
256.727 97.9023 li
@
270.655 98.8773 mo
270.655 97.9023 li
@
284.583 98.8773 mo
284.583 97.9023 li
@
298.512 98.8773 mo
298.512 97.9023 li
@
312.441 98.8773 mo
312.441 97.9023 li
@
228.869 15.6273 mo
228.869 16.6023 li
@
242.798 15.6273 mo
242.798 16.6023 li
@
256.727 15.6273 mo
256.727 16.6023 li
@
270.655 15.6273 mo
270.655 16.6023 li
@
284.583 15.6273 mo
284.583 16.6023 li
@
298.512 15.6273 mo
298.512 16.6023 li
@
312.441 15.6273 mo
312.441 16.6023 li
@
AMLJBM+ArialMT*1 [9 0 0 -9 0 0 ]msf
223.244 111.427 mo
(P1P2P3P4P5P6None)
[6.00307 7.92413 6.00308 7.9241 6.00305 7.92416 6.00308 7.9241 6.00308 7.92416 6.00305 2.67413 
6.49634 5.00266 5.00259 0 ]xsh
AMLJBM+ArialMT*1 [9.9 0 0 -9.9 0 0 ]msf
237.279 124.677 mo
(Positive events)
[6.60336 5.5029 4.94998 2.19601 2.75385 2.19598 4.94998 5.5029 2.75385 5.5029 4.94998 5.5029 
5.50287 2.75388 0 ]xsh
221.905 15.6273 mo
221.905 98.8773 li
@
319.405 15.6273 mo
319.405 98.8773 li
@
221.905 23.9523 mo
222.88 23.9523 li
@
221.905 40.6023 mo
222.88 40.6023 li
@
221.905 57.2523 mo
222.88 57.2523 li
@
221.905 73.9023 mo
222.88 73.9023 li
@
221.905 90.5523 mo
222.88 90.5523 li
@
319.405 23.9523 mo
318.43 23.9523 li
@
319.405 40.6023 mo
318.43 40.6023 li
@
319.405 57.2523 mo
318.43 57.2523 li
@
319.405 73.9023 mo
318.43 73.9023 li
@
319.405 90.5523 mo
318.43 90.5523 li
@
AMLJBM+ArialMT*1 [9 0 0 -9 0 0 ]msf
207.855 27.7023 mo
(S1)
[6.00307 0 ]xsh
207.855 44.3523 mo
(S2)
[6.00307 0 ]xsh
207.855 61.0023 mo
(S3)
[6.00307 0 ]xsh
207.855 77.6523 mo
(S4)
[6.00307 0 ]xsh
207.855 94.3023 mo
(S5)
[6.00307 0 ]xsh
AMLJBM+ArialMT*1 [0 -9.9 -9.9 0 0 0 ]msf
203.605 91.7523 mo
(Stressor events)
[-6.60338 -2.75386 -3.29662 -5.50288 -4.95 -4.95 -5.50288 -3.29662 -2.75388 -5.50287 -4.95001 -5.50287 
-5.5029 -2.75385 0 ]ysh
329.905 100.377 mo
339.655 100.377 li
@
329.905 15.6273 mo
339.655 15.6273 li
@
329.905 100.377 mo
329.905 15.6273 li
@
339.655 100.377 mo
339.655 15.6273 li
@
grestore
gsave
329.905 100.377 mo
339.655 100.377 li
339.655 15.6273 li
329.905 15.6273 li
cp
clp
329.845 100.437 mo
339.665 100.437 li
339.665 15.6173 li
329.845 15.6173 li
cp
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 17.3455 255.927 ]ct
[9.82002 0 0 84.82 312.499 155.49 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 26 
/H 226 
/M[26 0 0 -226 0 226 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
kJ-2^kH!e.lG*>5kH3pJkN:sBmB-8fkGm_)kJ-2^n>c8`kMk[>kH3pIoA]H&kJ-2^kGm_)p:g+3kH*jH
kMGC9q5j%dkGm_%kJ$,\r2T+`kMGC8kH*jGs4cemkIp&[kGd\"!8H\MkH*jGkM,=9rOqBqkGdY!kIg5`
qQ&eXkLSh/kH"-OpSd9+kIfuYkG\%(o[`3;kH!dDkKin7n[mtbkGRLhkI^Skm]5NKkKi>'kH"QZl_ipl
kITiVkGA7%kfW)"kGm^Bl,s%KkITiVkGIFbm(*&)kGdX@kJQJnn#?,^kG@@ZkIKcTntl&VkJQJnkGdX@
ou$C=kIB]RkG7:Sppfh'kG[R>kIp&gql&n\kG7:SkI0QOrhJbRkHsE\kGRL<kHsE\kGRL<lEpPtkI0QO
kG.4ImBui!kG@@9kH*jSn>5oVkG%.@kI'KLo:koPkH*jRkG.45p7h,PkHsEIkFh"4q6]UtkG.45kG%.H
lD+?RkFh"4kHa9Fm@X9JkF1S>kG%.3n='-@kHa9FkF^q+o<ItnkFh"/kE4r4p7UuLkFLdukHX3Cq46uF
kE4r4kFh"/r/p?.kHF'?kF:Xjs0([jkFUk+kD8?*!3bRWkF:XjkH=-@rLE&=kC;ZtkFCt.qO-MrkH=!<
kF(jipODA/kFC_'kC<-*oW75FkEk@TkH+EInXJ^.kB?$ikF;=7m[**[kH*j9kEl-jlZVHlkF(LukAC:#
kc<m7kEY4Jl)XibkF(LukAKI^m$IX:kEG(AkGdX2n!!R2k@`tWkEk@qnn7Z/kGdX2kEG(Aor%DZkEP.l
k?mDMplt94kE4q7kGRL-qiU9.k?mDKkE>"hr`JGfkG@@)kE"e.kG@@)kE"e.lD=KVkE>"hk?-oBm?%4,
kDeY%kG.4%n;[4&k>CE;kE+kdo250XkFh!tkDSLqp7UuLkDeY_k=Xp1q2Oj&kDSLqkFh!tlAPY"k=Xp/
kDJGYm6gb<kFUjokD8:gn=KEHkDJGYk<nF&o8!!okCr(^kFC^jp4`'kk<8!ukD/5Sq*"10kFC^jkCr(^
r0co>kCi#Nk;MLks+KWikC_qUkF(Oe!/0Nfk;MLhkCMrLrIF&bkEb:^kCDtSqCq)ukCMfHk:lFlpQjun
kCD_LkEGOeoR>tOk:>_ZkC3/RnU9RNkEG(XkC*1WmORI^c$JP!rK-?,c$JP!kE#[ic?eY"kE+qSja-)9
kDdo6r-.<HkDd`1mi_EKkDd`1k90>Pp5.%9k8WT@olSl/k8WT@hK87/k8WT@c#ih%m2P5Cc#Dh^reB]m
c#Dh^kD%6#k83<4l>5Ntk7Zs/dqnntk7Zs/c"uk^p_)b@c"uPUo7$@]c"cDOkC3,>fP9RZkC2<'mqV"q
kC1Zjl43e'kBkHdk6p[(qg6S#k6pI"n7UTjk6pHsfjj\bk6U6pc"$GQnd+E&c"#oBq02:Oc"#oBkB$Q.
dU2/AkB#`ll!NTXkB"pU!+4mnkATNfk?R<Ur<2;%k?I+Sk613kqJYP$k?R0QkATlppKQfck60s`k?%:X
oN:8XkA06^k?.H[nH.lhk?$hKk5tKnmV(c^k>g[Gk@jfmlVltHk5jaZk>M@\kZ-dHk@j$WkuIa`k5jaU
k>18<liI"bk@<[Nk>CCCmpl0'k>18<k5jaPnk8[Lk=t+?k?d=EohG$Pk5jaPk=au4p]9jbk?d=Ek=t+?
qcW;hk==],k5a[Jr^Z6Dk=Oh:k?6t<k=Oh:k>g\5l:1bBk5a[Fk="K&m/["`k>g\5k=4V7n5]6`k="K&
k5a[Ao0Dt6k<\82k>:>,p-J78k5a[Ak<S2rq#Kj`k=au#k<7u.l:_+Lk<.ojk5a[<m6(8.k<7u.k=au#
n3-P0k5a[7brG:po`4/EbrFkdp."UBbrFkdk<eu$mkj2bk5a[3k;<)olo!r+k<e>gk;E8>klBm5k;;?Z
kPtS_k<7'Dk5ag2rB8CZk5a[.mP*QQk5a[.f.cqQk5a[)bq/JeoDn&6bq/#XpGh\&bq/#Xk;E)be1'P\
k;D9KlRCusk;CL5!!)3_k;CL5klC_`k:k.,k5aj&r%QAAk5a[!mj6j;k5aZqfHKr3k5aZqbou`[o)Rr(
bou6Mpabhabou6Mk9g'HdiITOk9f71l5f$fk9eFok5aZgbo5jIrW)+)bo5aFm32?Mbo5aFk99=5hAYPW
k8i4kobQ]jk8he_p&OX`k8he_k5b;qmhs@`k5aZ_l4`4lk5aZ_dhDTlk5aZ_bnKRHp]0Ikbn0%<o+^j3
bn0%<k7mV$fF[3Gk7HMZmgS@Zk7GlHquH'`k7GlHk5bMnkn))Jk5a]T!"I0[k5aZSlO)YZk5aZSe-c$Z
k5aZObm3b=pAj@_bm3D3oEk-rbm3D3k6^kff*CI=k69cHmKD\Qk69*5r;c-`k69*5k5YJakQB'2k5a`K
rr^LIk5aZIliQ/Jk5aZIeH5OJM?&5.JcLB&df=m~>

%%EndBinary
grestore
np
grestore
339.655 100.377 mo
339.655 15.6273 li
.746853 .66949 .627771 .212955 cmyk
@
339.655 100.377 mo
338.807 100.377 li
@
339.655 73.0163 mo
338.807 73.0163 li
@
339.655 45.6563 mo
338.807 45.6563 li
@
339.655 18.2953 mo
338.807 18.2953 li
@
%ADOBeginSubsetFont: IAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AMLJBM+ArialMT gcheck setglobal} if
1 292 19 <00020055ffe7041105c00010001d01feb0852b58b10202435458400a1a1e
0405141e0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c
0f0f025500160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3f
ed31301bb10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f0655
09b8ffe6b40d0d065509b8ffee40190b0b0655091100100d0d065500100c
0c065500100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301b404e
04068702880b880fc90e0509070b180245134c154a19431b54135c155c19
521b6b076b0b63136c156b19601b79027706760b7a0f870698079610c918
da02d606d60bdb0f1a1a1e0405141e0d0d174110fff4000c000c01400056
0017fff2000b000b014000560017fff8000d000d01404011561773094021
2334300901000910090209410afff4000b000b014000560009ffe8000d00
0d0140b75609901f110c0c0cb80140b456110e0b0bb80140b45611080d0d
b80140b356117300b8ffc0400c2123342000400002000c0c0cb80140b456
00080b0bb80140b45600080d0db80140b65600901ec78b182b10f62b2b2b
5d2bed2b2b2b10f62b2b5d712bed2b2b2b003fed3fed3130015d71005db0
0243b0405058b4062019101cb8fff0b202200bbeffe00016ffe00012ffe0
000fffe0003838383838013838385959591bb10d14b8032fb46c0d0d041a
b8032fb26c040500183f2b3f2b3031591310123633321616121510020623
22272613101633323611102623220706556bd3a076b274426ad3a1d47991
b9a97c7ca9a97e7c4a5d02d30104013dac5fb3feffdafefefec3ad98b701
9dfe97eff00168016aee6986>AMLJBM+ArialMT AddT42Char 
AMLJBM+ArialMT /CharStrings get begin
/g19 19 def
end
AMLJBM+ArialMT /Encoding get
dup 48 /g19 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AMLJBM+ArialMT*1 
[32{/.notdef}rp /g3 8{/.notdef}rp /g12 6{/.notdef}rp /g19 /g20 /g21 
/g22 /g23 /g24 /g25 15{/.notdef}rp /g41 7{/.notdef}rp /g49 
/.notdef /g51 2{/.notdef}rp /g54 13{/.notdef}rp /g68 /g69 /g70 
/.notdef /g72 /g73 /g74 /.notdef /g76 2{/.notdef}rp /g79 
/g80 /g81 /g82 /g83 /g84 /g85 /g86 /g87 
/g88 /g89 2{/.notdef}rp /g92 134{/.notdef}rp]
AMLJBM+ArialMT nf
AMLJBM+ArialMT*1 [8.1 0 0 -8.1 0 0 ]msf
343.275 103.377 mo
(0)sh
343.275 76.0168 mo
(2)sh
343.275 48.6563 mo
(4)sh
343.275 21.2954 mo
(6)sh
329.905 15.6273 mo
339.655 15.6273 li
@
329.905 100.377 mo
339.655 100.377 li
@
329.905 100.377 mo
329.905 15.6273 li
@
339.655 100.377 mo
339.655 15.6273 li
@
329.905 100.377 mo
329.905 100.377 li
.71957 .637842 .593957 .13254 cmyk
@
329.905 15.6273 mo
329.905 15.6273 li
@
339.655 100.377 mo
339.655 100.377 li
@
339.655 15.6273 mo
339.655 15.6273 li
@
37.4045 225.627 mo
134.905 225.627 li
134.905 142.377 li
37.4045 142.377 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
.813809 .795224 .767361 .606043 cmyk
AMLJBM+ArialMT*1 [9.9 0 0 -9.9 0 0 ]msf
20.1545 138.271 mo
(c\) )sh
31.1549 138.271 mo
(Frequency of all microblogs)
[6.05033 3.29663 5.50288 5.50289 5.50288 5.50287 5.5029 4.95 4.95 2.75386 5.50288 2.75386 
2.75386 5.5029 2.19598 2.196 2.75386 8.24664 2.19597 4.95 3.29663 5.50288 5.50287 2.196 
5.50287 5.5029 0 ]xsh
gsave
37.4045 225.627 mo
134.905 225.627 li
134.905 142.377 li
37.4045 142.377 li
cp
clp
37.3445 225.637 mo
134.965 225.637 li
134.965 142.317 li
37.3445 142.317 li
cp
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 17.3455 255.927 ]ct
[97.62 0 0 83.32 19.9991 30.2898 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 119 
/H 85 
/M[119 0 0 -85 0 85 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
n@A$bn8.U.n-8BTn<<[Ipo3aJn6#1]n-/<@n:'o(!2]0Nn6,7\n-/<>n9sfDq>g6in,r1:n,VrMn14"=
nkf?_n8.U.n-8BTn<<@@n3HkQp/pgcn-/<@n:'l'n3QYKr`S`jn-/<>n9sfDn,Vq[r8.,'n,VrMn14"=
n5/UjoY1:<n-8BTn<<@@n3HJFn>uQloEF`Dn:'l'n3QPHn>c-bquuSJn9sfDn,Vq[nD<X7r^ucSn14"=
n5/Ujn@nArp7V;Un<<@@n3HJFn>u*_n;[Hsnp^))n3QPHn>bs]n;I$hqL.kNn,Vq[nD<X7n4N1#!4hX1
n5/Ujn@nArn=]97po4(gn3HJFn>u*_n;Zpdn>5V?n6,7\n-/<>n9sfDq#L0in,r1:n,VrMn14"=nPB3^
n8.U.n-8BTn<<@@n3HhPpK6pdn-/<@n:'l'n3QVJs&nikn-/<>n9sfDn,Vq[qqh&'n,VrMn14"=n5/Uj
o=k4<n-8BTn<<@@n3HJFn>uNko`aiEn:'l'n3QPHn>c*ar<;\Kn9sfDn,Vq[nD<X7rCZ]Sn14"=n5/Uj
n@nAroq;5Un<<@@n3HJFn>u*_n;[Ero7$2*n3QPHn>bs]n;I!gqgItOn,Vq[nD<X7n4N1#s1.^2n5/Uj
n@nArn=]97pSn"gn3HJFn>u*_n;Zpdn>5V?n6,7\n-/<>n9t,MpquS$n,r1:n,VrMn14%>!4hSqn8.U.
n-8BTn<<@@qEXd?n6#1]n-/<@n:'l'nj3:An6,7\n-/<>n9sfDn,W=fp&jg@n,VrMn14"=n5/^mrbV)<
n-8BTn<<@@n3HJFr2fRmn-/<@n:'l'n3QPHoW%kin-/<>n9sfDn,Vq[nD=*DoDnAQn14"=n5/Ujn@nQ"
r!)Y`n<<@@n3HJFn>u*_rf-N/n:'l'n3QPHn>bs]p5Ag+n9sfDn,Vq[nD<X7n4N^2ngj4?n5/Ujn@nAr
n=]N>qNLEJn3HJFn>u*_n;Zpd!2]4^n3QPHn>bs]n;HdapqupFn,Vq[nD<X7n4N1#n@A$bn8.U.n-8BT
n<<@@q*=^?n6#1]n-/<@n:'l'nNd.@n6,7\n-/<>n9sfDn,W:epB0pAn,VrMn14"=n5/[ls(q2=n-8BT
n<<@@n3HJFqlKLmn-/<@n:'l'n3QPHo;_ein-/<>n9sfDn,Vq[nD='Co`4JRn14"=n5/Ujn@nN!r<Dba
n<<@@n3HJFn>u*_rJgH/n:'l'n3QPHn>bs]oo&a+n9sfDn,Vq[nD<X7n4N[1o.0=@n5/Ujn@nArn=]K=
qigNKn3HJFn>u*_n;Zpds/#:_n3QPHn>bs]n;HdapVZjFn,Vq[nD<X7n4N1#n@7sIn4)o^n9FH'n;6t>
po*[5n2Tp>n7;$Vn9"2r!2T*8n2Tp;n7;$Sn9"05q>fXXnD`pDn8Rk9n@8$Ks#BL;nA"I;n>l&8n>Ph-
q`+:/n?)1jn<rcfn>,P)o/Q_/n>btgn<WQcn@d]Zr8RD/n-ST'n/Ll,n2To,oY:@>n9FH'n;6Y5n1=&g
n?)Y"oORHZn9"/qn1=&gn>c.lr+,;_n9"05hZ30*n-T)5o5O1<n@7sIn4)o^n9FZ-qlB4Cn>Ph-n2Tp>
n7;$Vs)dgRn>,P)n2Tp;n7;$SpN67Rn@d]ZnD`pDn8Rk9!4_R/n2To,nA"I;n>l&8po+"en1=&gn?)1j
n<rcfn>,P)n2Tp;n7;$Sn9"05q#KRXnD`pDn8Rk9n@8!J!''I;nA"I;n>l&8n>Ph-qDe4/n?)1jn<rcf
n>,P)ni6Y/n>btgn<WQcn@d]Zqr7>/n-ST'n/Ll,n2To,o=t:>n9FH'n;6Y5n1=&gn?)V!ojmQ[n9"/q
n1=&gn>c+krFGD`n9"05hZ30*n-T&4oPj:=n@7sIn4)o^n9FW,r2]=Dn>Ph-n2Tp>n7;$VrcIaRn>,P)
n2Tp;n7;$Sp2p1Rn@d]ZnD`pDn8Rk9s1%X0n2To,nA"I;n>l&8pSdqen1=&gn?)1jn<rcfn>,P)n2Tp;
n7;$Sn9"K>pq>PbnD`pDn8Rk9n[JS/n2To,nA"I;n>l&8n>Q17pFPenn?)1jn<rcfn>,V+s"*Y!n>btg
n<WQcn@e)ep&OUAn-ST'n/Ll,n2U#/r^QCln9FH'n;6Y5n1=&gr2oXon7;$Vn9"/qn1=&goW%kin7;$S
n9"05hZ30*r<`*&n8Rk9n@7sIn4)o^om$CZn>l&8n>Ph-n2Tp>n7;Ndo9o)in>,P)n2Tp;n7;6Yqj-_n
n@d]ZnD`pDn8SCHnf.).n2To,nA"I;n>l;?qMF^?n1=&gn?)1jn<rcf!2T.\n1=&gn>btgn<WQcpq?L:
hZ30*n-ST'n/Ll,n2To,nA"I;n>l&8n>Q.6paknon?)1jn<rcfn>,S*!%dV!n>btgn<WQcn@e&dpAj^B
n-ST'n/Ll,n2Tu.s$lLmn9FH'n;6Y5n1=&gqlTRon7;$Vn9"/qn1=&go;_ein7;$Sn9"05hZ30*r!E$&
n8Rk9n@7sIn4)o^oQ^=Zn>l&8n>Ph-n2Tp>n7;KcoU52jn>,P)n2Tp;n7;3Xr0Hhon@d]ZnD`pDn8S@G
o,I2/n2To,nA"I;n>l8>qhag@n1=&gn?)1jn<rcfs.o4]n1=&gn>btgn<WQcpV$F:hZ30*n-ST'n/LjE
n-8A'n6,6!n:L-6q&];Pn-/:tn42s^n87XunK%ZOn-/:tn4E*`n87XuklAX%n.Y9kn0dc2rs%s6n6,6!
n:L-6n/h'&q\SrBn42s^n87Xun/h'&o,%BBn4E*`n87XuaT1B%n.Y9kn0d]0n/h4)rE8V.n:L-6n/h'&
n/(Rar=nl<n87Xun/h'&n/(Rcob@<<n87XuX8r55o+UTnn0d]0n/h(%n/D"Pqh";An/h'&n/(Ran.bA/
rrqrsn/h'&n/(Rcn.bA/pBCBsX8q`'n,NG9nL*f1n/h(%n/CeJn-8Y/q&]#/n/(Ran.bA/n-/;&n-/:t
n4E*`n87XukQ&R%n.Y9kn0d`1!!_p6n6,6!n:L-6n/h'&qA8lBn42s^n87Xun/h'&ne_<Bn4E*`n87Xu
a8k<%n.Y9kn0d]0n/h1(r`S_/n:L-6n/h'&n/(Rar"Sf<n87Xun/h'&n/(RcoG%6<n87XuX8r24oFp]o
n0d]0n/h(%n/CtOr.=DBn/h'&n/(Ran.bA/rWVlsn/h'&n/(Rcn.bA/p'(<sX8q`'n,WJ9ngEo2n/h(%
n/CeJn-8V.qB#,0n/(Ran.bA/n-/;&n-/:tn4E*`n87Xuq#Ic%n.Y9knL";an-8A'n6,6!n:L-6n/hE0
pBC%&n42s^n87Xun/h-(rrqm.n4E*`n87Xuf`9M%n.Y9kn0d]0o,dlPn6,6!n:L-6n/h'&n/)!mogeKc
n87Xun/h'&n/(^grCQJmn87Xu\H)7%n.Y9kn0d]0n/h(%oc!`Hn:L-6n/h'&n/(Ran.bk=o53t#n/h'&
n/(Rcn.bS5qebg+X8q`'rrDTin0d]0n/h(%n/CeJpBLHun/h'&n/(Ran.bA/n-&e5nK.0'n/(Rcn.bA/
n-/Re[/f\0n,Vr*n-8A'n6,6!n:L-6n/hB/p]^.'n42s^n87Xun/h*'!!Vj.n4E*`n87XufDsG%n.Y9k
n0d]0nfIfPn6,6!n:L-6n/h'&n/(slp.+Tdn87Xun/h'&n/([fr^lSnn87Xu\,c1%n.Y9kn0d]0n/h(%
oG[ZHn:L-6n/h'&n/(Ran.bh<oPO($n/h'&n/(Rcn.bP4r,(p,X8q`'rW)Nin0d]0n/h(%n/CeJp'1Bu
n/h'&n/(Ran.bA/n-/h5nfI9(n/(Rcn.bA/n-/Od[K,e1n,Vshn1a?BnA"I'n?284q5X4in0RR#n?)1V
n=B&cnYQ;`n0RR%n>l%Vn=&i`nB1S-pAj[`nE03@n:C'Bn@J0Es"NqQnA"I'n?284n>bt(qbZu_n?)1V
n=B&cn>>\$o2>Qcn>l%Vn=&i`nB15#n,`ILp#b`En:C'Bn@J*Cn7;1+rP.i4n?284n>bt(n5/VVrD<,_
n=B&cn>>\$n5AbVoht]cn=&i`nB15#n,`%@n,`N>o7?BEn@J*Cn7;%'n7;6qql]F?n>bt(n5/VVn5/VF
s)%=Dn>>\$n5AbVn5AbEpMKbDnB15#n,`%@n,`$0n.Pf5n[e3Dn7;%'n7;$kn:LG8q5Wp1n5/VVn5/VF
n87Zln0RR%n>l%Vn=&i`nB1P,p]0danE03@n:C'Bn@J-D!&3nQnA"I'n?284n>bt(qG?o_n?)1Vn=B&c
n>>\$nl#Kcn>l%Vn=&i`nB15#n,`FKp?(iFn:C'Bn@J*Cn7;.*rkIr5n?284n>bt(n5/VVr)!&_n=B&c
n>>\$n5AbVoMYWcn=&i`nB15#n,`%@n,`K=oRZKFn@J*Cn7;%'n7;3pr3#O@n>bt(n5/VVn5/VFrb_7D
n>>\$n5AbVn5AbEp20\DnB15#n,`%@n,`$0n.Yi5o"+<En7;%'n7;$kn:LD7qPs$2n5/VVn5/VFn87Zl
n0RR%n>l%Vn=&i`q9&KTn,VqYnE03@n:C'Bn[\_3n1a?BnA"I'n?284n>c=2pEf<*n?)1Vn=B&cn>>b&
s!@/4n>l%Vn=&i`nB15#qZ6BknE03@n:C'Bn@J*Co47i2nA"I'n?284n>bt(n50%bor[^[n=B&cn>>\$
n5AnZrN#Ecn=&i`nB15#n,`%@r;lNkn:C'Bn@J*Cn7;%'ojmu2n?284n>bt(n5/VVn50+To:>Afn>>\$
n5AbVn5AtKqjR"knB15#n,`%@n,`$0rtFr:n@J*Cn7;%'n7;$kpO`6nn>bt(n5/VVn5/VFn8/0&nYYe%
n5AbVn5AbEn87sCq9&1,n,`%@n,`$0n.Y<&n1a?BnA"I'n?284n>c:1pa,E+n?)1Vn=B&cn>>_%!%%,4
n>l%Vn=&i`nB15#q>p<knE03@n:C'Bn@J*Cnmqc2nA"I'n?284n>bt(n50"ap9!g\n=B&cn>>\$n5AkY
ri>Ndn=&i`nB15#n,`%@quQHkn:C'Bn@J*Cn7;%'oORo2n?284n>bt(n5/VVn50(SoUYJgn>>\$n5AbV
n5AqJr0m+lnB15#n,`%@n,`$0rY+l:n@J*Cn7;%'n7;$kp4E0nn>bt(n5/VVn5/VFn883&nttn&n5AbV
n5AbEn87pBqTA:-n,`%@n,`$0n.Y:Sn,Vqin=]8Nn?DBlq(VRtn,Vqen;Zp*n=T1WnLsqsn,Vqen;Hd*
n=8tTklBiGn4N0Mn;?]8n3-=BrrDO#n=]8Nn?DBln1a>3q[N6.n;Zp*n=T1Wn1a>3o*t[.n;Hd*n=8tT
c2dc7oh+]Rn;?]8n3-7@n.G;crLiX[n?DBln1a>3n."lHrC$9Gn=T1Wn1a>3n."lFog\jKn=8tTc2d?+
n,WHFo8<#;n3-7@n.G/_n5]1dqloQ"n1a>3n."lHn3lc<rsJ<(n1a>3n."lFn4)o;pBpa(c2d?+n,Vs8
n,NGOnNH@An.G/_n5\t^n.,4Iq(V:<n."lHn3lc<n-\Y=n,Vqen;Hd*n=8tTkQ'cGn4N0Mn;?]8n3-:A
!!)L#n=]8Nn?DBln1a>3q@30.n;Zp*n=T1Wn1a>3ndYU.n;Hd*n=8tTc2d`6p.FfSn;?]8n3-7@n.G8b
rh/a\n?DBln1a>3n."lHr'^3Gn=T1Wn1a>3n."lFoLAdKn=8tTc2d?+n,WEEoSW,<n3-7@n.G/_n5].c
r35Z#n1a>3n."lHn3lc<rX/6(n1a>3n."lFn4)o;p'U[(c2d?+n,Vs8n,WJOnicIBn.G/_n5\t^n.,1H
qCqC=n."lHn3lc<n-\Y=n,Vqen;Hd*n=8tTq#JtGn4N0Mn;?]8nN?k8n,Vqin=]8Nn?DBln1a\=pAj[l
n;Zp*n=T1Wn1aD5rrDNtn;Hd*n=8tTf`:^Gn4N0Mn;?]8n3-7@o+Cs6n=]8Nn?DBln1a>3n.#;Too8H/
n=T1Wn1a>3n.##JrJU/7n=8tTc2d?+r;cHin;?]8n3-7@n.G/_oi:oin?DBln1a>3n."lHn3m8Jo:PLZ
n1a>3n."lFn4*,Aqjd-_c2d?+n,Vs8rrDTin3-7@n.G/_n5\t^pC@$0n1a>3n."lHn3lc<n-T.LnM'G4
n."lFn4)o;n-\pjf)Y;4n,Vs8n,Vr@n,Vqin=]8Nn?DBln1aY<p]0dmn;Zp*n=T1Wn1aA4!!)Ktn;Hd*
n=8tTfDtXGn4N0Mn;?]8n3-7@ne(m6n=]8Nn?DBln1a>3n.#8Sp5SQ0n=T1Wn1a>3n."uIrep88n=8tT
c2d?+quHBin;?]8n3-7@n.G/_oMtiin?DBln1a>3n."lHn3m5IoUkU[n1a>3n."lFn4*)@r1*6`c2d?+
n,Vs8rW)Nin3-7@n.G/_n5\t^p($s0n1a>3n."lHn3lc<n-]1LnhBP5n."lFn4)o;n-\mifDtD5n,Vs8
n,Rt~>

%%EndBinary
grestore
np
grestore
37.4045 225.627 mo
134.905 225.627 li
.746853 .66949 .627771 .212955 cmyk
@
37.4045 142.377 mo
134.905 142.377 li
@
44.369 225.627 mo
44.369 224.652 li
@
58.2971 225.627 mo
58.2971 224.652 li
@
72.2264 225.627 mo
72.2264 224.652 li
@
86.1545 225.627 mo
86.1545 224.652 li
@
100.083 225.627 mo
100.083 224.652 li
@
114.012 225.627 mo
114.012 224.652 li
@
127.941 225.627 mo
127.941 224.652 li
@
44.369 142.377 mo
44.369 143.352 li
@
58.2971 142.377 mo
58.2971 143.352 li
@
72.2264 142.377 mo
72.2264 143.352 li
@
86.1545 142.377 mo
86.1545 143.352 li
@
100.083 142.377 mo
100.083 143.352 li
@
114.012 142.377 mo
114.012 143.352 li
@
127.941 142.377 mo
127.941 143.352 li
@
AMLJBM+ArialMT*1 [9 0 0 -9 0 0 ]msf
38.744 238.177 mo
(P1P2P3P4P5P6None)
[6.00307 7.92414 6.00307 7.92415 6.00307 7.92413 6.00307 7.92416 6.00307 7.92413 6.00306 2.67418 
6.49635 5.00262 5.00262 0 ]xsh
AMLJBM+ArialMT*1 [9.9 0 0 -9.9 0 0 ]msf
52.7795 251.427 mo
(Positive events)
[6.60337 5.50288 4.95 2.19599 2.75386 2.19599 4.95 5.50288 2.75386 5.50288 4.95 5.50288 
5.50288 2.75386 0 ]xsh
37.4045 142.377 mo
37.4045 225.627 li
@
134.905 142.377 mo
134.905 225.627 li
@
37.4045 150.702 mo
38.3795 150.702 li
@
37.4045 167.352 mo
38.3795 167.352 li
@
37.4045 184.002 mo
38.3795 184.002 li
@
37.4045 200.652 mo
38.3795 200.652 li
@
37.4045 217.302 mo
38.3795 217.302 li
@
134.905 150.702 mo
133.93 150.702 li
@
134.905 167.352 mo
133.93 167.352 li
@
134.905 184.002 mo
133.93 184.002 li
@
134.905 200.652 mo
133.93 200.652 li
@
134.905 217.302 mo
133.93 217.302 li
@
AMLJBM+ArialMT*1 [9 0 0 -9 0 0 ]msf
23.3545 154.452 mo
(S1)
[6.00307 0 ]xsh
23.3545 171.102 mo
(S2)
[6.00307 0 ]xsh
23.3545 187.752 mo
(S3)
[6.00307 0 ]xsh
23.3545 204.402 mo
(S4)
[6.00307 0 ]xsh
23.3545 221.052 mo
(S5)
[6.00307 0 ]xsh
AMLJBM+ArialMT*1 [0 -9.9 -9.9 0 0 0 ]msf
19.1045 218.502 mo
(Stressor events)
[-6.60338 -2.75386 -3.29663 -5.50288 -4.95 -4.95001 -5.50287 -3.29663 -2.75386 -5.50288 -4.95 -5.5029 
-5.50288 -2.75386 0 ]ysh
145.405 226.377 mo
155.155 226.377 li
@
145.405 141.627 mo
155.155 141.627 li
@
145.405 226.377 mo
145.405 141.627 li
@
155.155 226.377 mo
155.155 141.627 li
@
gsave
145.405 226.377 mo
155.155 226.377 li
155.155 141.627 li
145.405 141.627 li
cp
clp
145.345 226.437 mo
155.165 226.437 li
155.165 141.617 li
145.345 141.617 li
cp
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 17.3455 255.927 ]ct
[9.82 0 0 84.82 127.999 29.4898 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 26 
/H 226 
/M[26 0 0 -226 0 226 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
kJ-2^kH!e.lG*>5kH3pJkN:sBmB-8fkGm_)kJ-2^n>c8`kMk[>kH3pIoA]H&kJ-2^kGm_)p:g+3kH*jH
kMGC9q5j%dkGm_%kJ$,\r2T+`kMGC8kH*jGs4cemkIp&[kGd\"!8H\MkH*jGkM,=9rOqBqkGdY!kIg5`
qQ&eXkLSh/kH"-OpSd9+kIfuYkG\%(o[`3;kH!dDkKin7n[mtbkGRLhkI^Skm]5NKkKi>'kH"QZl_ipl
kITiVkGA7%kfW)"kGm^Bl,s%KkITiVkGIFbm(*&)kGdX@kJQJnn#?,^kG@@ZkIKcTntl&VkJQJnkGdX@
ou$C=kIB]RkG7:Sppfh'kG[R>kIp&gql&n\kG7:SkI0QOrhJbRkHsE\kGRL<kHsE\kGRL<lEpPtkI0QO
kG.4ImBui!kG@@9kH*jSn>5oVkG%.@kI'KLo:koPkH*jRkG.45p7h,PkHsEIkFh"4q6]UtkG.45kG%.H
lD+?RkFh"4kHa9Fm@X9JkF1S>kG%.3n='-@kHa9FkF^q+o<ItnkFh"/kE4r4p7UuLkFLdukHX3Cq46uF
kE4r4kFh"/r/p?.kHF'?kF:Xjs0([jkFUk+kD8?*!3bRWkF:XjkH=-@rLE&=kC;ZtkFCt.qO-MrkH=!<
kF(jipODA/kFC_'kC<-*oW75FkEk@TkH+EInXJ^.kB?$ikF;=7m[**[kH*j9kEl-jlZVHlkF(LukAC:#
kc<m7kEY4Jl)XibkF(LukAKI^m$IX:kEG(AkGdX2n!!R2k@`tWkEk@qnn7Z/kGdX2kEG(Aor%DZkEP.l
k?mDMplt94kE4q7kGRL-qiU9.k?mDKkE>"hr`JGfkG@@)kE"e.kG@@)kE"e.lD=KVkE>"hk?-oBm?%4,
kDeY%kG.4%n;[4&k>CE;kE+kdo250XkFh!tkDSLqp7UuLkDeY_k=Xp1q2Oj&kDSLqkFh!tlAPY"k=Xp/
kDJGYm6gb<kFUjokD8:gn=KEHkDJGYk<nF&o8!!okCr(^kFC^jp4`'kk<8!ukD/5Sq*"10kFC^jkCr(^
r0co>kCi#Nk;MLks+KWikC_qUkF(Oe!/0Nfk;MLhkCMrLrIF&bkEb:^kCDtSqCq)ukCMfHk:lFlpQjun
kCD_LkEGOeoR>tOk:>_ZkC3/RnU9RNkEG(XkC*1WmORI^c$JP!rK-?,c$JP!kE#[ic?eY"kE+qSja-)9
kDdo6r-.<HkDd`1mi_EKkDd`1k90>Pp5.%9k8WT@olSl/k8WT@hK87/k8WT@c#ih%m2P5Cc#Dh^reB]m
c#Dh^kD%6#k83<4l>5Ntk7Zs/dqnntk7Zs/c"uk^p_)b@c"uPUo7$@]c"cDOkC3,>fP9RZkC2<'mqV"q
kC1Zjl43e'kBkHdk6p[(qg6S#k6pI"n7UTjk6pHsfjj\bk6U6pc"$GQnd+E&c"#oBq02:Oc"#oBkB$Q.
dU2/AkB#`ll!NTXkB"pU!+4mnkATNfk?R<Ur<2;%k?I+Sk613kqJYP$k?R0QkATlppKQfck60s`k?%:X
oN:8XkA06^k?.H[nH.lhk?$hKk5tKnmV(c^k>g[Gk@jfmlVltHk5jaZk>M@\kZ-dHk@j$WkuIa`k5jaU
k>18<liI"bk@<[Nk>CCCmpl0'k>18<k5jaPnk8[Lk=t+?k?d=EohG$Pk5jaPk=au4p]9jbk?d=Ek=t+?
qcW;hk==],k5a[Jr^Z6Dk=Oh:k?6t<k=Oh:k>g\5l:1bBk5a[Fk="K&m/["`k>g\5k=4V7n5]6`k="K&
k5a[Ao0Dt6k<\82k>:>,p-J78k5a[Ak<S2rq#Kj`k=au#k<7u.l:_+Lk<.ojk5a[<m6(8.k<7u.k=au#
n3-P0k5a[7brG:po`4/EbrFkdp."UBbrFkdk<eu$mkj2bk5a[3k;<)olo!r+k<e>gk;E8>klBm5k;;?Z
kPtS_k<7'Dk5ag2rB8CZk5a[.mP*QQk5a[.f.cqQk5a[)bq/JeoDn&6bq/#XpGh\&bq/#Xk;E)be1'P\
k;D9KlRCusk;CL5!!)3_k;CL5klC_`k:k.,k5aj&r%QAAk5a[!mj6j;k5aZqfHKr3k5aZqbou`[o)Rr(
bou6Mpabhabou6Mk9g'HdiITOk9f71l5f$fk9eFok5aZgbo5jIrW)+)bo5aFm32?Mbo5aFk99=5hAYPW
k8i4kobQ]jk8he_p&OX`k8he_k5b;qmhs@`k5aZ_l4`4lk5aZ_dhDTlk5aZ_bnKRHp]0Ikbn0%<o+^j3
bn0%<k7mV$fF[3Gk7HMZmgS@Zk7GlHquH'`k7GlHk5bMnkn))Jk5a]T!"I0[k5aZSlO)YZk5aZSe-c$Z
k5aZObm3b=pAj@_bm3D3oEk-rbm3D3k6^kff*CI=k69cHmKD\Qk69*5r;c-`k69*5k5YJakQB'2k5a`K
rr^LIk5aZIliQ/Jk5aZIeH5OJM?&5.JcLB&df=m~>

%%EndBinary
grestore
np
grestore
155.155 226.377 mo
155.155 141.627 li
@
155.155 220.055 mo
154.307 220.055 li
@
155.155 190.552 mo
154.307 190.552 li
@
155.155 161.05 mo
154.307 161.05 li
@
AMLJBM+ArialMT*1 [8.1 0 0 -8.1 0 0 ]msf
158.775 223.055 mo
(5)sh
158.775 193.553 mo
(10)
[4.50237 0 ]xsh
158.775 164.05 mo
(15)
[4.50237 0 ]xsh
145.405 141.627 mo
155.155 141.627 li
@
145.405 226.377 mo
155.155 226.377 li
@
145.405 226.377 mo
145.405 141.627 li
@
155.155 226.377 mo
155.155 141.627 li
@
145.405 226.377 mo
145.405 226.377 li
.71957 .637842 .593957 .13254 cmyk
@
145.405 141.627 mo
145.405 141.627 li
@
155.155 226.377 mo
155.155 226.377 li
@
155.155 141.627 mo
155.155 141.627 li
@
221.905 225.627 mo
319.405 225.627 li
319.405 142.377 li
221.905 142.377 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
.813809 .795224 .767361 .606043 cmyk
%ADOBeginSubsetFont: IAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AMLJBM+ArialMT gcheck setglobal} if
1 8808 71 <00020046ffe803df05ba0011001d0213b0852b58407c0a02040d250d340d
440d053514351c5702540a5214531c6702640565096314601cc01fd405d5
13dd19e513e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f
901f072e02240d2e163a02350d4b02450d4614491c570a560d670de506e7
16fa01f40e100115030e0b100f001b1c0b0711000a151c030b18410afff8
000d000d014000560018fff8000c000c0140b45618330100bbfff2000b00
0b0140b4560025110f4110fff8000d000d01400056000ffff4000c000c01
400056000ffff2000b000b01404024560f251010d0110110114011601180
11041f400b0b02551f400d0d025511121010025511b8fff440110f0f0255
11060e0e025511180d0d025511b8fff2400b0b0b0655110e1010065511b8
ffeeb40c0c065511b8fff8b40d0d065511bbfff8000c000c0140b6561174
12080d0db80140b456120c0c0cb80140b456120e0b0bb80140b656122407
100c0cb80140b45607100d0db80140403b56bf07cf07df07ff07041f073f
074f0703071e0b0b025507180c0c0255071e0d0d0255070c0b0b0655070c
0d0d0655071a0c0c065507191e3450182b4e10f42b2b2b2b2b2b5d712b2b
4ded2b2b2bfd2b2b2b2b2b2b2b2b2b2b2b5d713c10ed2b2b2b10fd2b3ce4
2b2b003fed3f3c3fed3f3c11391112393130005d01715d00711bb10315b8
032f400a6c030b010e0e000a0b1bb8032fb46c0b070f0000183f3f2b3f33
12393f2b3031592135062322262635341236333216171133110114163332
36353426232206033865c47fd5756ad48360962fb3fd20ac7576a5a87b78
a1869e8cfba39f01038a5141020efa460212cccac1c6daccc400>AMLJBM+ArialMT AddT42Char 
2 3686 90 <00010006000005b70426001205ecbc0000fff2000b000b0140b4560e0e0b
0bbe01400056000cfff4000c000d0140b456020c0c0db80140b45610040d
0db80140b45605040d0db80140b45606020d0d410d014000560003fffc00
0d000d014000560000ffea000d000d0140b45610060c0cb80140b4560606
0c0c410d014000560009fffa000c000c01400056000efffa000c000c0140
b4560f060c0c410d014000560012fffa000c000c014000560008fffa000c
000c0140b45607060c0cbe01400056000cfff2000b000b0140b456020e0b
0bb80140b45610060b0bb80140b45606040b0b410d014000560009fffc00
0b000b01400056000efff4000b000b0140b4560f0c0b0b410d0140005600
12fff4000b000b014000560008fff4000b000b0140b456070c0b0b410d01
400056000afff4000d000d014000560004fff4000d000d0140b45611220b
0b410d01400056000affe8000b000b014000560004ffe8000b000b0140b4
5611200d0db80140b45611220c0c410e01400056000affde000c000c0140
00560004ffde000c000c01400056b10202435458b90012fff440110d0d02
5507060d0d025500060d0d02550ab8ffd4b40c0d025504b8ffe8400b0c0d
025511200c0d02550ab8ffc0b40e10025504b8ffc0402f0e10025511400e
100255040a110301000c06070601060f0a000a0d0c060c0c02550c110102
040a04110a0c0c025511b8fff8b40d0d0255112f2b2bcdcd10d6cd10d42b
cd003f3f3f3f3f111217393130002b2b2b2b2b2b012b2b2b1b40160f1401
2a04290a024a115b118e110311200d0d06550ab8ffe0b40d0d065504b8ff
e0b40d0d065511b8fff040091f2134101c1d273409b8fff040b71f243404
060c0913061b09191205040004060b090b0e08121000130314071c081b0b
1d0e240025072a082b0e340035073a083b0e4403470640074d084b0b430f
47114a125b0f52126b076408671279067a077408b906ba0fb612f506fb09
280b112800280d270e280f27122f1438003712770886089803970ca701a8
02a80ba60cb500b606ba0ec804d606d909e804e80fe712f406fa091c0b06
0d0d06550c060d0d065510060d0d06550e060d0d06550f060d0d065512b1
0602435458401b0a0e0f0412001108070825070f250e122500000e07030d
010c250db8ffd640370b0b06550d0225012a0b0b0655010d011413060a0b
11260a2b115404520a5c116c117c118a110a110a040300010f0a000a0c06
07060106003f3f3f3f3f111217395d01111239392f2bf42f2bf411121739
10e410e410e41112391112391112391b40140305050206070705090a0a08
0b0c0c0a1011110fb8ff4bb305001220b8ff4940660a0f0e20c311070820
071112122b0507140505070e0a0c0c250d0e140d0d0e08110f0f2b0a0814
0a0a080005020225010014010100000201071204080f110c0e0d0a110a04
03120d0c0c0808070702020106120f0f0e0e000a14f6100d01600d700d80
0d030db801a7400a204f0a016f0a7f0a020ab8025540094f11016f117f11
0211b80255400b1005016005700580050305b801a7b501f613f666182b4e
10f4194df45d5d18fd5d71fd5d711a19fd5d5d18e6003f3c103c103c3f3c
103c103c103c103c1217390111123939123939113939123939874d2e2b87
7dc4872e182b877dc4872e182b877dc4872e182b877dc42b2b2b870e10c4
070e103c070e103c870e10c4870e10c44bb01f53b00243b040505a58b40d
200c2002bcffe00001ffe0000effd0b400300f2012b8ffe0013838383838
383838594bb03453b00243b040505a58b90008ffd0b10730013838594bb0
21534bb033515ab00243b040505a58b90008ffe0b10720013838594bb012
534bb01e515ab00243b040505a58b9000effd0b60f200d200c2008b8ffd0
b2073012b8ffe0b2003802baffe00001ffe0013838383838383838383859
4bb012534bb017515ab00243b040505a58b90011ffe0b30a200420003838
385959313001435c58b9000effd4b61239002c123900b8ffd4b113392b2b
2b592b2b2b2b2b5d71722b2b2b002b2b2b715d015d59002b2b2b2b2b2b2b
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
21013313173637133313173713330123032703014bfebbbaa93f0433a9b9
9f353db6affeb4bba929d70426fd9be411ca026efd98cbcd0266fbda027c
b5fccf00>AMLJBM+ArialMT AddT42Char 
AMLJBM+ArialMT /CharStrings get begin
/g71 71 def
/g90 90 def
end
AMLJBM+ArialMT /Encoding get
dup 100 /g71 put
dup 119 /g90 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AMLJBM+ArialMT*1 
[32{/.notdef}rp /g3 8{/.notdef}rp /g12 6{/.notdef}rp /g19 /g20 /g21 
/g22 /g23 /g24 /g25 15{/.notdef}rp /g41 7{/.notdef}rp /g49 
/.notdef /g51 2{/.notdef}rp /g54 13{/.notdef}rp /g68 /g69 /g70 
/g71 /g72 /g73 /g74 /.notdef /g76 2{/.notdef}rp /g79 
/g80 /g81 /g82 /g83 /g84 /g85 /g86 /g87 
/g88 /g89 /g90 /.notdef /g92 134{/.notdef}rp]
AMLJBM+ArialMT nf
AMLJBM+ArialMT*1 [9.9 0 0 -9.9 0 0 ]msf
187.03 138.271 mo
(d\) Frequency of forwarded microblogs)
[5.50288 3.29663 2.75386 6.05032 3.29663 5.50288 5.50288 5.50287 5.50287 5.5029 4.94998 4.95001 
2.75385 5.50293 2.75385 2.75388 2.75385 5.5029 3.29663 7.14597 5.50287 3.29663 5.5029 5.5029 
5.50287 2.75385 8.24664 2.19598 4.94998 3.29663 5.5029 5.50287 2.19598 5.50287 5.5029 0 
]xsh
gsave
221.905 225.627 mo
319.405 225.627 li
319.405 142.377 li
221.905 142.377 li
cp
clp
221.845 225.637 mo
319.465 225.637 li
319.465 142.317 li
221.845 142.317 li
cp
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 17.3455 255.927 ]ct
[97.62 0 0 83.32 204.499 30.2898 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 119 
/H 85 
/M[119 0 0 -85 0 85 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
n;6W=n7;$]n,Vs*n/D+EpiQ!/n5/V6n,Vrkn.bD7!-I]6n5Ab6n,Vrkn.b@2q>g6in,`#Nn,Vqdn,Vs7
nco*un7;$]n,Vs*n/Ce<n-/\cp/(7<n,Vrkn.bA6n-/D]r_i6Dn,Vrkn.b@2n,VqYr(?WSn,Vqdn,Vs7
n-8AmoUu/Un,Vs*n/Ce<n-/;Xn;[AHoDnAon.bA6n-/;Zn;Hr>quH5"n.b@2n,VqYn4N0MrXAB,n,Vs7
n-8Amn=]7Np3cabn/Ce<n-/;Xn;Zo;n7_h9neCS8n-/;Zn;Hc9n7_P1q@rE<n,VqYn4N0Mn-ndd!/^6&
n-8Amn=]7Nn9j^DpiQ=Rn-/;Xn;Zo;n7_;*n9".'n5Ab6n,Vrkn.b@2q#L0in,`#Nn,Vqdn,Vs7nHJst
n7;$]n,Vs*n/Ce<n-/YbpJC@=n,Vrkn.bA6n-/A\s&/?En,Vrkn.b@2n,VqYqb$QSn,Vqdn,Vs7n-8Am
o:Z)Un,Vs*n/Ce<n-/;Xn;[>Go`4Jpn.bA6n-/;Zn;Ho=r;c>#n.b@2n,VqYn4N0Mr=&<,n,Vs7n-8Am
n=]7NomH[bn/Ce<n-/;Xn;Zo;n7_e8o+^\9n-/;Zn;Hc9n7_M0q\8N=n,VqYn4N0Mn-ndds,$<'n-8Am
n=]7Nn9j^DpN67Rn-/;Xn;Zo;n7_;*n9".'n5Ab6n,Vrkn.b[;p`&]&n,`#Nn,Vqdn,W!8!/^1Ln7;$]
n,Vs*n/Ce<q??Tsn5/V6n,Vrkn.bA6ncf$sn5Ab6n,Vrkn.b@2n,W=dp&XYTn,Vqdn,Vs7n-8JprabMk
n,Vs*n/Ce<n-/;Xr/LB/n,Vrkn.bA6n-/;ZoS`[+n,Vrkn.b@2n,VqYn4NWZoDn@hn,Vs7n-8Amn=]FS
quH56n/Ce<n-/;Xn;Zo;rb1n:n.bA6n-/;Zn;Hc9p1X>:n.b@2n,VqYn4N0Mn-o<snc809n-8Amn=]7N
n9jsKqASjFn-/;Xn;Zo;n7_;*!-IaQn-/;Zn;Hc9n7_;*p`'#Jn,VqYn4N0Mn-nddn;6W=n7;$]n,Vs*
n/Ce<q$$Nsn5/V6n,Vrkn.bA6nHAmrn5Ab6n,Vrkn.b@2n,W:cpAsbUn,Vqdn,Vs7n-8Gos((Vln,Vs*
n/Ce<n-/;Xqi1</n,Vrkn.bA6n-/;Zo8EU+n,Vrkn.b@2n,VqYn4NTYo`4Iin,Vs7n-8Amn=]CRr;c>7
n/Ce<n-/;Xn;Zo;rFkh:n.bA6n-/;Zn;Hc9ok=8:n.b@2n,VqYn4N0Mn-o9ro)S9:n-8Amn=]7Nn9jpJ
q\nsGn-/;Xn;Zo;n7_;*s)dgRn-/;Zn;Hc9n7_;*pD`rJn,VqYn4N0Mn-nddn<<>En6,7gn@7tan.thK
pjV]7n42uEn>Pi?n.G2=!.F>=n4E,Dn>,Q8n.G.?q>fXXn>u,mn65;]n<<DGrrhgon?qbqn>5Uin:'j/
qa^?Mn>5WQn<<>Rn9sd.o1ApQn=oEJn<!,On13Arr2fRmn@e<pn,VsAn-&5`oX4Y*n@7tan.tMBn,r/M
n>6)^oVh8Cn.G/<n,r/On=oTOr1rhDn.G.?hZ3/In@eg)o31V`n<<>En6,7gn@81gqk`ctn:'j/n42uE
n>Pi?rt4f6n9sd.n4E,Dn>,Q8pC[66n13Arn>u,mn65;]!0cr:n-&5`n?qbqn>5UipjW$fn,r/Mn>5WQ
n<<>Rn9sd.n4E,Dn>,Q8n.G.?q#KRXn>u,mn65;]n<<AF!!Mdon?qbqn>5Uin:'j/qFC9Mn>5WQn<<>R
n9sd.nk&jQn=oEJn<!,On13ArqlKLmn@e<pn,VsAn-&5`o<nS*n@7tan.tMBn,r/Mn>6&]or.ADn.G/<
n,r/On=oQNrM8qEn.G.?hZ3/In@ed(oNL_an<<>En6,7gn@8.fr2&lun:'j/n42uEn>Pi?rXn`6n9sd.
n4E,Dn>,Q8p(@06n13Arn>u,mn65;]s-*#;n-&5`n?qbqn>5UipO;sfn,r/Mn>5WQn<<>Rn9sd.n4E,D
n>,Q8n.GIHpab5%n>u,mn65;]nWNs:n-&5`n?qbqn>5Uin:(39pB0nTn>5WQn<<>Rn9sj0rr_a^n=oEJ
n<!,On13c(p&OT`n@e<pn,VsAn-&>cr`S`un@7tan.tMBn,r/Mr2'(_n>Pi?n.G/<n,r/OoV2;Yn>,Q8
n.G.?hZ3/IrOqj:n65;]n<<>En6,7gosjq0n>5Uin:'j/n42uEn>Q>Mo98YUn9sd.n4E,Dn>,c>qiL:Z
n13Arn>u,mn65hlnc80Cn-&5`n?qbqn>5jpqA/RLn,r/Mn>5WQn<<>R!.FBcn,r/On=oEJn<!,Opac.j
hZ3/In@e<pn,VsAn-&5`n?qbqn>5Uin:(08p]L"Un>5WQn<<>Rn9sg/!!D^^n=oEJn<!,On13`'pAj]a
n@e<pn,VsAn-&;bs&nj!n@7tan.tMBn,r/Mqka"_n>Pi?n.G/<n,r/Oo:l5Yn>,Q8n.G.?hZ3/Ir4Vd:
n65;]n<<>En6,7goXOk0n>5Uin:'j/n42uEn>Q;LoTSbVn9sd.n4E,Dn>,`=r/gC[n13Arn>u,mn65ek
o)S9Dn-&5`n?qbqn>5goq\J[Mn,r/Mn>5WQn<<>Rs*aHdn,r/On=oEJn<!,OpFH(jhZ3/In@e<pn,Vqn
n,VrIn:L-mn:L-:q%<B6n,Vr;n87YKn87Y#nIYa5n,Vr;n87YKn87Y#klBiGn.Y9kn.Y9kn.tQprrDOX
n:L-mn:L-:n.G-iq`+:/n87YKn87Y#n.G-io/Q_/n87YKn87Y#c2dbUob6fpn.Y9kn.tKnn4*&%rIXN%
n:L-:n.G-in2ToSr@mjtn87Y#n.G-in2ToSoe?:tn87Y#c2d>In,WG$o+UTnn.tKnn4)o!n3-Jsqh";E
n.G-in2ToSn1a?Krs80$n.G-in2ToSn1a?KpB^U$c2d>In,Vqkn,NG(nJ:Ton4)o!n3-8mn-\q&q%<)r
n2ToSn1a?Kn-JLqn,Vr;n87YKn87Y#kQ'cGn.Y9kn.Y9kn.tNo!!)LXn:L-mn:L-:n.G-iqDe4/n87YK
n87Y#n.G-ini6Y/n87YKn87Y#c2d_Tp(Qoqn.Y9kn.tKnn4*#$rdsW&n:L-:n.G-in2ToSr%Rdtn87Y#
n.G-in2ToSoJ$4tn87Y#c2d>In,WD#oFp]on.tKnn4)o!n3-Grr.=DFn.G-in2ToSn1a?KrWr*$n.G-i
n2ToSn1a?Kp'CO$c2d>In,Vqkn,WJ(neU]pn4)o!n3-8mn-\n%q@W2sn2ToSn1a?Kn-JLqn,Vr;n87YK
n87Y#q#JtGn.Y9kn.Y9knJ2*?n,VrIn:L-mn:L-:n.GKspAj\Bn87YKn87Y#n.G3krrDOJn87YKn87Y#
f`:^Gn.Y9kn.Y9kn.tKno1&^Kn:L-mn:L-:n.G-in2U>_okj1Pn87Y#n.G-in2U&WrGD$Xn87Y#c2d>I
r;cHin.Y9kn.tKnn4)o!of`49n:L-:n.G-in2ToSn1aiYo53t&n.G-in2ToSn1aQQqebg.c2d>In,Vqk
rrDTin.tKnn4)o!n3-8mpBpa(n.G-in2ToSn1a?Kn-B"+nIb6jn2ToSn1a?Kn-Jdhf)Y:Rn,Vqkn,Vqn
n,VrIn:L-mn:L-:n.GHrp]0eCn87YKn87Y#n.G0j!!)LJn87YKn87Y#fDtXGn.Y9kn.Y9kn.tKnnj`XK
n:L-mn:L-:n.G-in2U;^p20:Qn87Y#n.G-in2U#Vrb_-Yn87Y#c2d>IquHBin.Y9kn.tKnn4)o!oKE.9
n:L-:n.G-in2ToSn1afXoPO('n.G-in2ToSn1aNPr,(p/c2d>In,VqkrW)Nin.tKnn4)o!n3-8mp'U[(
n.G-in2ToSn1a?Kn-K%+ne(?kn2ToSn1a?Kn-JagfDtCSn,Vqkn,Vs\n-&6RnA"Ijn>#Igq47;On,r0>
n?)2Fn<!,OnX9HHn,r0<n>l&An;ZoLn:CE9pAj\TnE04Kn58ZTn?2<brrhhanA"Ijn>#Ign=B%Nqi1</
n?)2Fn<!,On=&hKo8EU+n>l&An;ZoLn:C'/n4NW@p#baPn58ZTn?26`n=]EgrP.j"n>#Ign=B%Nn;Zq>
rK[#?n<!,On=&hKn;He:oof69n;ZoLn:C'/n4N34n6u;no24uWn?26`n=]9cn>GuTqkNWrn=B%Nn;Zq>
n<NL)rt4f6n=&hKn;He:n<3:#pC[66n:C'/n4N34n6tf`n,NHknZM?an=]9cn>GcNn.teiq47!Wn;Zq>
n<NL)n.G/Yn,r0<n>l&An;ZoLn:CB8p]0eUnE04Kn58ZTn?29a!!MeanA"Ijn>#Ign=B%NqMk6/n?)2F
n<!,On=&hKnr*O+n>l&An;ZoLn:C'/n4NT?p?(jQn58ZTn?26`n=]BfrkIs#n>#Ign=B%Nn;Zq>r0?r?
n<!,On=&hKn;He:oTK09n;ZoLn:C'/n4N34n6u8moMP)Xn?26`n=]9cn>GrSr1i`sn=B%Nn;Zq>n<NL)
rXn`6n=&hKn;He:n<3:#p(@06n:C'/n4N34n6tf`n,WKknuhHbn=]9cn>GcNn.tbhqOR*Xn;Zq>n<NL)
n.G/Yn,r0<n>l&An;ZoLq18<ln,VrMnE04Kn58ZTnZDkpn-&6RnA"Ijn>#Ign=BCXpB0oEn?)2Fn<!,O
n=&nMrr_bKn>l&An;ZoLn:C'/qb$QSnE04Kn58ZTn?26`o:Z)UnA"Ijn>#Ign=B%Nn;[@Jor[_Kn<!,O
n=&hKn;Hq>rN#FNn;ZoLn:C'/n4N34rF,>,n58ZTn?26`n=]9cor%_cn>#Ign=B%Nn;Zq>n<O!7o8rGR
n=&hKn;He:n<3L)qi1(Wn:C'/n4N34n6tf`rrDTin?26`n=]9cn>GcNpD3T@n=B%Nn;Zq>n<NL)n.>Yh
nXAqLn;He:n<3:#n.GGHq18#8n4N34n6tf`n,Vs\n-&6RnA"Ijn>#Ign=B@Wp]L#Fn?)2Fn<!,On=&kL
!!D_Kn>l&An;ZoLn:C'/qF^KSnE04Kn58ZTn?26`nt?#UnA"Ijn>#Ign=B%Nn;[=Ip9!hLn<!,On=&hK
n;Hn=ri>OOn;ZoLn:C'/n4N34r*f8,n58ZTn?26`n=]9coV_Ycn>#Ign=B%Nn;Zq>n<Ns6oT8PSn=&hK
n;He:n<3I(r/L1Xn:C'/n4N34n6tf`rW)Nin?26`n=]9cn>GcNp(mN@n=B%Nn;Zq>n<NL)n.G\hns]%M
n;He:n<3:#n.GDGqLS,9n4N34n6tf`n,Vr&n,Vr\n9FGAn2TnQq&B)Jn,VrJn7;#nn1=&@nJ_HIn,VrL
n7;#nn1=&@klBiGn-SRfhZ3-jnc8[in6,7*n8RkVn.tL4n,W>Up.+U_n6GH6n.G./n,W&Or^lTin6GH6
n.EqGr!E$&n-.\Ln0@E&n6,C.rHRgNn2TnQn/Lisn42tYrESu"n1=&@n/Lisn4E+[oj%E"n1=&@c2d>?
n-/dkiW/Hmn,Vr\n9FGAp,Mq/n.tL4n,VrJn7;#nn1=SOne(@1n,VrLn7;#nn1=;Gq@V!Qn-SRfhZ*X$
nK[N'n6,7*n8RkVn.td<q&Af'n42tYn6GH6n.G./n,VrLn7;#nn1=&@kQ'cGn-SRfhZ3-jnGiOhn6,7*
n8RkVn.tL4n,W;TpIF^`n6GH6n.G./n,W#Ns%2]jn6GH6n.EqGq[)s&n-.\Ln0@E&n6,@-rcmpOn2TnQ
n/Lisn42tYr*8o"n1=&@n/Lisn4E+[oN_?"n1=&@c2d>?n-/ajirJQnn,Vr\n9FGAof2k/n.tL4n,VrJ
n7;#nn1=PNo+CI2n,VrLn7;#nn1=8Fq[q*Rn-SRfhZ3[$ng!W(n6,7*n8RkVn.ta;qA\o(n42tYn6GH6
n.G./n,VrLn7;#nn1=&@q#JtGn-SRfhZ30k!$gt5n6,7*n8RkVn.tL4q>g6in42tYn6GH6n.G./nc8[i
n4E+[n6GH6n.F=Rp&ORgn-.\Ln0@E&o3)&qn9FGAn2TnQn/Lisn43CeojmPsn1=&@n/Lisn4E7_rFGD&
n1=&@c2d>?r<;fshZ3-jn,Vr\n9FVFr,D-bn.tL4n,VrJn7;#nr[dXln.G./n,VrLn7;#np+6(ln.EqG
n-SRfmJueXn0@E&n6,7*n8RkVpD3T@n/Lisn42tYn6GH6n.>X>nJgrtn4E+[n6GH6n.GEqf)Y:Hn-.\L
n0@E&n6,7*n8RkVn.tL4q#L0in42tYn6GH6n.G./nGiOhn4E+[n6GH6n.F:QpAj[hn-.\Ln0@E&nlbuq
n9FGAn2TnQn/Lisn43@dp13Ytn1=&@n/Lisn4E4^rabM'n1=&@c2d>?quu`shZ3-jn,Vr\n9FSErG_6c
n.tL4n,VrJn7;#nr@IRln.G./n,VrLn7;#nodp"ln.EqGn-SRfm/Z_Xn0@E&n6,7*n8RkVp(mN@n/Lis
n42tYn6GH6n.G[>nf.&un4E+[n6GH6n.GBpfDtCIn-.\LJ,~>

%%EndBinary
grestore
np
grestore
221.905 225.627 mo
319.405 225.627 li
.746853 .66949 .627771 .212955 cmyk
@
221.905 142.377 mo
319.405 142.377 li
@
228.869 225.627 mo
228.869 224.652 li
@
242.798 225.627 mo
242.798 224.652 li
@
256.727 225.627 mo
256.727 224.652 li
@
270.655 225.627 mo
270.655 224.652 li
@
284.583 225.627 mo
284.583 224.652 li
@
298.512 225.627 mo
298.512 224.652 li
@
312.441 225.627 mo
312.441 224.652 li
@
228.869 142.377 mo
228.869 143.352 li
@
242.798 142.377 mo
242.798 143.352 li
@
256.727 142.377 mo
256.727 143.352 li
@
270.655 142.377 mo
270.655 143.352 li
@
284.583 142.377 mo
284.583 143.352 li
@
298.512 142.377 mo
298.512 143.352 li
@
312.441 142.377 mo
312.441 143.352 li
@
AMLJBM+ArialMT*1 [9 0 0 -9 0 0 ]msf
223.244 238.177 mo
(P1P2P3P4P5P6None)
[6.00307 7.92413 6.00308 7.9241 6.00305 7.92416 6.00308 7.9241 6.00308 7.92416 6.00305 2.67413 
6.49634 5.00266 5.00259 0 ]xsh
AMLJBM+ArialMT*1 [9.9 0 0 -9.9 0 0 ]msf
237.279 251.427 mo
(Positive events)
[6.60336 5.5029 4.94998 2.19601 2.75385 2.19598 4.94998 5.5029 2.75385 5.5029 4.94998 5.5029 
5.50287 2.75388 0 ]xsh
221.905 142.377 mo
221.905 225.627 li
@
319.405 142.377 mo
319.405 225.627 li
@
221.905 150.702 mo
222.88 150.702 li
@
221.905 167.352 mo
222.88 167.352 li
@
221.905 184.002 mo
222.88 184.002 li
@
221.905 200.652 mo
222.88 200.652 li
@
221.905 217.302 mo
222.88 217.302 li
@
319.405 150.702 mo
318.43 150.702 li
@
319.405 167.352 mo
318.43 167.352 li
@
319.405 184.002 mo
318.43 184.002 li
@
319.405 200.652 mo
318.43 200.652 li
@
319.405 217.302 mo
318.43 217.302 li
@
AMLJBM+ArialMT*1 [9 0 0 -9 0 0 ]msf
207.855 154.452 mo
(S1)
[6.00307 0 ]xsh
207.855 171.102 mo
(S2)
[6.00307 0 ]xsh
207.855 187.752 mo
(S3)
[6.00307 0 ]xsh
207.855 204.402 mo
(S4)
[6.00307 0 ]xsh
207.855 221.052 mo
(S5)
[6.00307 0 ]xsh
AMLJBM+ArialMT*1 [0 -9.9 -9.9 0 0 0 ]msf
203.605 218.502 mo
(Stressor events)
[-6.60338 -2.75386 -3.29663 -5.50288 -4.95 -4.95001 -5.50287 -3.29663 -2.75386 -5.50288 -4.95 -5.5029 
-5.50288 -2.75386 0 ]ysh
329.905 226.377 mo
339.655 226.377 li
@
329.905 141.627 mo
339.655 141.627 li
@
329.905 226.377 mo
329.905 141.627 li
@
339.655 226.377 mo
339.655 141.627 li
@
gsave
329.905 226.377 mo
339.655 226.377 li
339.655 141.627 li
329.905 141.627 li
cp
clp
329.845 226.437 mo
339.665 226.437 li
339.665 141.617 li
329.845 141.617 li
cp
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 17.3455 255.927 ]ct
[9.82002 0 0 84.82 312.499 29.4898 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 26 
/H 226 
/M[26 0 0 -226 0 226 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
kJ-2^kH!e.lG*>5kH3pJkN:sBmB-8fkGm_)kJ-2^n>c8`kMk[>kH3pIoA]H&kJ-2^kGm_)p:g+3kH*jH
kMGC9q5j%dkGm_%kJ$,\r2T+`kMGC8kH*jGs4cemkIp&[kGd\"!8H\MkH*jGkM,=9rOqBqkGdY!kIg5`
qQ&eXkLSh/kH"-OpSd9+kIfuYkG\%(o[`3;kH!dDkKin7n[mtbkGRLhkI^Skm]5NKkKi>'kH"QZl_ipl
kITiVkGA7%kfW)"kGm^Bl,s%KkITiVkGIFbm(*&)kGdX@kJQJnn#?,^kG@@ZkIKcTntl&VkJQJnkGdX@
ou$C=kIB]RkG7:Sppfh'kG[R>kIp&gql&n\kG7:SkI0QOrhJbRkHsE\kGRL<kHsE\kGRL<lEpPtkI0QO
kG.4ImBui!kG@@9kH*jSn>5oVkG%.@kI'KLo:koPkH*jRkG.45p7h,PkHsEIkFh"4q6]UtkG.45kG%.H
lD+?RkFh"4kHa9Fm@X9JkF1S>kG%.3n='-@kHa9FkF^q+o<ItnkFh"/kE4r4p7UuLkFLdukHX3Cq46uF
kE4r4kFh"/r/p?.kHF'?kF:Xjs0([jkFUk+kD8?*!3bRWkF:XjkH=-@rLE&=kC;ZtkFCt.qO-MrkH=!<
kF(jipODA/kFC_'kC<-*oW75FkEk@TkH+EInXJ^.kB?$ikF;=7m[**[kH*j9kEl-jlZVHlkF(LukAC:#
kc<m7kEY4Jl)XibkF(LukAKI^m$IX:kEG(AkGdX2n!!R2k@`tWkEk@qnn7Z/kGdX2kEG(Aor%DZkEP.l
k?mDMplt94kE4q7kGRL-qiU9.k?mDKkE>"hr`JGfkG@@)kE"e.kG@@)kE"e.lD=KVkE>"hk?-oBm?%4,
kDeY%kG.4%n;[4&k>CE;kE+kdo250XkFh!tkDSLqp7UuLkDeY_k=Xp1q2Oj&kDSLqkFh!tlAPY"k=Xp/
kDJGYm6gb<kFUjokD8:gn=KEHkDJGYk<nF&o8!!okCr(^kFC^jp4`'kk<8!ukD/5Sq*"10kFC^jkCr(^
r0co>kCi#Nk;MLks+KWikC_qUkF(Oe!/0Nfk;MLhkCMrLrIF&bkEb:^kCDtSqCq)ukCMfHk:lFlpQjun
kCD_LkEGOeoR>tOk:>_ZkC3/RnU9RNkEG(XkC*1WmORI^c$JP!rK-?,c$JP!kE#[ic?eY"kE+qSja-)9
kDdo6r-.<HkDd`1mi_EKkDd`1k90>Pp5.%9k8WT@olSl/k8WT@hK87/k8WT@c#ih%m2P5Cc#Dh^reB]m
c#Dh^kD%6#k83<4l>5Ntk7Zs/dqnntk7Zs/c"uk^p_)b@c"uPUo7$@]c"cDOkC3,>fP9RZkC2<'mqV"q
kC1Zjl43e'kBkHdk6p[(qg6S#k6pI"n7UTjk6pHsfjj\bk6U6pc"$GQnd+E&c"#oBq02:Oc"#oBkB$Q.
dU2/AkB#`ll!NTXkB"pU!+4mnkATNfk?R<Ur<2;%k?I+Sk613kqJYP$k?R0QkATlppKQfck60s`k?%:X
oN:8XkA06^k?.H[nH.lhk?$hKk5tKnmV(c^k>g[Gk@jfmlVltHk5jaZk>M@\kZ-dHk@j$WkuIa`k5jaU
k>18<liI"bk@<[Nk>CCCmpl0'k>18<k5jaPnk8[Lk=t+?k?d=EohG$Pk5jaPk=au4p]9jbk?d=Ek=t+?
qcW;hk==],k5a[Jr^Z6Dk=Oh:k?6t<k=Oh:k>g\5l:1bBk5a[Fk="K&m/["`k>g\5k=4V7n5]6`k="K&
k5a[Ao0Dt6k<\82k>:>,p-J78k5a[Ak<S2rq#Kj`k=au#k<7u.l:_+Lk<.ojk5a[<m6(8.k<7u.k=au#
n3-P0k5a[7brG:po`4/EbrFkdp."UBbrFkdk<eu$mkj2bk5a[3k;<)olo!r+k<e>gk;E8>klBm5k;;?Z
kPtS_k<7'Dk5ag2rB8CZk5a[.mP*QQk5a[.f.cqQk5a[)bq/JeoDn&6bq/#XpGh\&bq/#Xk;E)be1'P\
k;D9KlRCusk;CL5!!)3_k;CL5klC_`k:k.,k5aj&r%QAAk5a[!mj6j;k5aZqfHKr3k5aZqbou`[o)Rr(
bou6Mpabhabou6Mk9g'HdiITOk9f71l5f$fk9eFok5aZgbo5jIrW)+)bo5aFm32?Mbo5aFk99=5hAYPW
k8i4kobQ]jk8he_p&OX`k8he_k5b;qmhs@`k5aZ_l4`4lk5aZ_dhDTlk5aZ_bnKRHp]0Ikbn0%<o+^j3
bn0%<k7mV$fF[3Gk7HMZmgS@Zk7GlHquH'`k7GlHk5bMnkn))Jk5a]T!"I0[k5aZSlO)YZk5aZSe-c$Z
k5aZObm3b=pAj@_bm3D3oEk-rbm3D3k6^kff*CI=k69cHmKD\Qk69*5r;c-`k69*5k5YJakQB'2k5a`K
rr^LIk5aZIliQ/Jk5aZIeH5OJM?&5.JcLB&df=m~>

%%EndBinary
grestore
np
grestore
339.655 226.377 mo
339.655 141.627 li
@
339.655 226.377 mo
338.807 226.377 li
@
339.655 206.272 mo
338.807 206.272 li
@
339.655 186.166 mo
338.807 186.166 li
@
339.655 166.061 mo
338.807 166.061 li
@
339.655 145.954 mo
338.807 145.954 li
@
AMLJBM+ArialMT*1 [8.1 0 0 -8.1 0 0 ]msf
343.275 229.377 mo
(0)sh
343.275 209.272 mo
(1)sh
343.275 189.166 mo
(2)sh
343.275 169.06 mo
(3)sh
343.275 148.955 mo
(4)sh
329.905 141.627 mo
339.655 141.627 li
@
329.905 226.377 mo
339.655 226.377 li
@
329.905 226.377 mo
329.905 141.627 li
@
339.655 226.377 mo
339.655 141.627 li
@
329.905 226.377 mo
329.905 226.377 li
.71957 .637842 .593957 .13254 cmyk
@
329.905 141.627 mo
329.905 141.627 li
@
339.655 226.377 mo
339.655 226.377 li
@
339.655 141.627 mo
339.655 141.627 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/AMLJBM+ArialMT*1 uf
/AMLJBM+ArialMT uf
/IAAAAA+ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
